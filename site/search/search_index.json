{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Schedule","text":"<p>This is the schedule for our 16-week course. Click on a week to view the materials for that week.</p> <p>todo, add a section in week 1 about the differrent parts of the robot. Rio, spark max, canbus, sensors, etc.</p>"},{"location":"resources/","title":"Documentation","text":"<ul> <li>WPILib Documentation</li> <li>SPARK-MAX Documentation<ul> <li>SPARK-MAX code examples</li> </ul> </li> </ul>"},{"location":"resources/#downloads","title":"Downloads","text":"<ul> <li>WPILib + VSCode - Select the latest version</li> <li>2023 FRC Game Tools</li> <li>2023 FRC Radio Configuration Utility</li> </ul>"},{"location":"todo/","title":"PathWeaver","text":"<p>404</p>"},{"location":"week1-l1/","title":"Week 1: Introduction to FRC and Robotics Programming","text":""},{"location":"week1-l1/#introduction-to-frc","title":"Introduction to FRC","text":"<p>The FIRST Robotics Competition (FRC) is a prestigious international competition at the high school level. Each year, starting in January, teams are given just six weeks to design, build, and program a robot to compete in an engineering challenge, unveiled in the form of a game. FRC embodies the excitement of a sport and the rigors of science and technology, promoting valuable life skills such as teamwork, leadership, and innovation. Watch the video below for more insights</p> <p>About FIRST Robotics Competition (YouTube)</p>"},{"location":"week1-l1/#introduction-to-robotics-programming","title":"Introduction to Robotics Programming","text":"<p>In our FRC robotics program, we'll primarily be using Java to program our robot. You'll learn to code controls for different robot components and use inputs from joysticks in teleoperated mode. We'll also explore programming autonomous routines for the robot to perform specific tasks without manual control.</p> <p>Working with sensors will be a crucial part of our learning process. These sensors provide feedback about the robot's environment, helping it make decisions like maintaining a specific distance from an object or aligning with a target. By the end of the program, you'll have a solid foundation in Java programming and practical experience in applying these skills in a real-world robotics context.</p>"},{"location":"week1-l1/#introduction-to-java","title":"Introduction to Java","text":"<p>Java is a versatile, object-oriented programming language that's popular in various applications, including robotics. As a high-level language, it's designed to be human-readable, making it great for learning programming basics. What makes it particularly suitable for FRC robotics is its principle of \"write once, run anywhere,\" which allows us to run our code on different types of hardware. Additionally, Java comes with robust libraries and tools, such as the WPILib library, specifically created for FRC robotics.</p> <p>In the coming weeks, we'll be diving into the fundamental aspects of Java programming. We'll cover everything from variables, data types, and control flow to loops and functions. We'll also explore object-oriented programming (OOP) principles that help us design modular and manageable code\u2014a critical aspect when dealing with complex systems like a robot.</p>"},{"location":"week1-l1/#setup-your-development-environment","title":"Setup your development environment","text":"<p>Now let's get our development environment set up! The primary tools we'll be using are Visual Studio Code (vscode) and WPILib.</p> <ol> <li> <p>Visual Studio Code (vscode): vscode is a source code editor developed by Microsoft. It's lightweight, powerful, and supports a wide variety of programming languages, including Java. We'll use vscode to write, debug, and test our Java code. This will be installed as part of the WPILib package installer</p> </li> <li> <p>WPILib: WPILib is the library we'll be using to program our robot. It provides a set of classes and methods that simplifies interacting with the hardware of our robot, so we don't need to start from scratch. WPILib is also equipped with a plugin for vscode, which will provide us with tools specifically designed to make FRC robot programming easier. To get both WPILib and vscode, download the latest release using this link:  WPILib Github</p> </li> </ol> <p>Follow these steps to install WPILib:</p> <ol> <li>Navigate to your downloads folder and open the WPILib_Windows ISO file.</li> <li>Double-click the WPILibInstaller file. If the Windows security dialog opens, click 'More info,' then 'Run anyway.' </li> <li>Once WPILib installer opens, click 'Start' </li> <li>Click 'Install for all Users' </li> <li>Select 'Download for this computer only,' then click 'Next.' </li> <li>Click 'Finish' to complete the installation.</li> <li>Find the 'WPILib VS Code' shortcut on your desktop and open it.   </li> </ol>"},{"location":"week1-l1/#setup-your-frc-game-tools","title":"Setup your FRC Game Tools","text":"<p>FRC Game Tools is a suite of software resources developed by FIRST Robotics Competition (FRC) to help teams manage and improve their gameplay. This comprehensive set of tools includes the FRC Driver Station, the FRC Dashboard, and the FRC Bridge Configuration Utility.</p> <p>Download here</p> <p>The FRC Driver Station is an essential component used during competition matches and testing sessions. It provides a user interface for driving the robot and displays important feedback such as battery voltage, robot connection status, match time, and more. It also includes options for enabling and disabling autonomous or teleoperated control of the robot.</p> <p>The FRC Dashboard is a customizable interface that displays telemetry data from the robot in real-time. It can be tailored to display information pertinent to the team's needs, such as sensor readings, motor outputs, or camera feeds.</p> <p>The FRC Bridge Configuration Utility is a tool that aids in setting up the wireless bridge on your robot for optimal communication with the Driver Station.</p> <p>In order to make full use of these tools, teams should install FRC Game Tools on the driver station computer. Installation also includes the necessary components to communicate with the roboRIO controller. Regular updates are provided during the FRC season to account for rule changes and software improvements.</p> <p>Remember to always download the latest version from the official website to ensure compatibility with the current FRC season's rules and hardware.</p>"},{"location":"week1-l1/#introduction-to-gitgithub","title":"Introduction to Git/GitHub","text":"<p>Git is an essential tool that we'll be using throughout our robotics programming journey. It is a version control system that allows multiple people to work on a project at the same time without overwriting each other's changes. It tracks modifications and can revert back to any previous version of our code.</p> <p>GitHub, on the other hand, is an online platform that uses Git to host our projects. It allows us to collaborate, review, and manage our codebase from anywhere in the world.</p> <p>Follow these steps to get started with Git and GitHub:</p> <ol> <li> <p>Create a GitHub Account: Visit GitHub and create a new account if you don't already have one. Make sure to choose a username that you're comfortable sharing with others, as it will be public.</p> </li> <li> <p>Send Your GitHub Username: Once you've set up your GitHub account, send your username to one of the programming mentors. They'll invite you to join our team's group on GitHub. This is where we'll host all our robot code.</p> </li> <li> <p>Setup GitHub Client: To interact with our GitHub repositories more easily, we recommend using the GitHub Desktop client. Visit the GitHub Desktop page to download and install it. This client provides a graphical user interface for Git, making it easier to manage our codebase. Follow the instructions during the setup process, and when asked, log in using your GitHub account details.</p> </li> </ol> <p>You're now part of our programming team's GitHub group. In the coming weeks, we'll go over how we'll use Git and GitHub to manage our codebase, review each other's code, and track changes throughout the season.</p>"},{"location":"week1-l1/#first-steps-in-java-writing-a-hello-world-program","title":"First Steps in Java: Writing a \"Hello, World!\" Program","text":"<p>Now that you've set up your development environment, let's dive into writing our first Java program. In this exercise, we will write a simple \"Hello, World!\" program in Visual Studio Code. This program will print out the text \"Hello, World!\" to the console.</p> <p>Here are the step-by-step instructions:</p> <ol> <li>Launch Visual Studio Code: Open Visual Studio Code (vscode) from your desktop or applications folder.</li> <li>Create a New Java Class: In the vscode menu bar, navigate to File &gt; New File. A new file will be opened in the editor. Now, click File &gt; Save As..., navigate to your Desktop and save this file with the name HelloWorld.java.</li> <li>Write the Program: In the new file, type or paste the following Java code:<pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre> </li> </ol> <p>This code defines a HelloWorld class with a main method. The main method is the entry point for any Java application, and the System.out.println statement prints any text (string) in double quotations out to the console, in this case \"Hello, World!\".</p> <p>Time to run your first application!</p> <ol> <li> <p>Run the Program: To run the program, find the green \"Play\" button in the top-right corner of the vscode window and click it. </p> </li> <li> <p>Check the Output: Look at the terminal at the bottom of the vscode window. You should see Hello, World! printed there. </p> </li> </ol> <p>Congratulations, you've just written and run your first Java program!</p> <p>Now, why not try changing the message? Instead of \"Hello, World!\", you can make the computer say anything you want! Just replace the text inside the quotation marks with your own message, and then run the program again. The console will print whatever you typed. It's your first step in getting the computer to do what you want.</p> <p>Over the coming weeks, we'll dive into more complex concepts and start interacting with our robot using Java and WPILib. Welcome to the exciting world of FRC programming!</p>"},{"location":"week1-l2/","title":"Robotics components","text":"<p>It's time to dive deeper into the hardware components commonly found on an FRC robot. Each component plays a vital role in the operation and control of the robot. Understanding these components, their functionality, and their interaction with the software is crucial for successful robot operation.</p>"},{"location":"week1-l2/#roborio","title":"RoboRIO","text":"<p>RoboRIO is the brain of an FRC robot. It is a robust, high-performance embedded platform that runs your robot code and directly interfaces with robot peripherals. It is equipped with a variety of inputs and outputs, including digital I/O for sensors and switches, PWM outputs for motor controllers, analog inputs for advanced sensors, CAN Bus and more.</p> <p></p>"},{"location":"week1-l2/#power-distribution-panel-pdp","title":"Power Distribution Panel (PDP)","text":"<p>The PDP distributes power from the robot's battery to its various components. It provides overcurrent protection to prevent damage to the robot's electrical components. The PDP can also monitor the current draw of each circuit and provide this data to the RoboRIO, allowing teams to diagnose electrical issues or optimize power usage.</p> <p></p>"},{"location":"week1-l2/#pneumatic-control-module-pcm","title":"Pneumatic Control Module (PCM)","text":"<p>The PCM provides control over the robot's pneumatic components. It handles the electrical control of the compressor and solenoids. The PCM communicates with the RoboRIO over the CAN bus, allowing the robot code to activate solenoids or monitor pressure switches.</p> <p></p>"},{"location":"week1-l2/#can-bus","title":"CAN Bus","text":"<p>The CAN (Controller Area Network) bus is a communication protocol that allows various devices on the robot to exchange data in a highly robust and organized manner. Originating from the RoboRIO, the main controller, the CAN bus follows a daisy-chain structure, where each device is linked to the next. This structure greatly simplifies wiring and allows for more efficient organization within the robot.</p> <p>Each device connected to the CAN bus has a unique ID which ensures that data is directed to the right component. When a message is sent over the bus, it includes this ID, so that only the intended recipient acts upon the message. This not only streamlines communication but also allows for complex operations as multiple devices can interact and share data seamlessly, enabling more sophisticated and responsive control systems.</p> <p></p>"},{"location":"week1-l2/#radio","title":"Radio","text":"<p>The radio on an FRC robot provides wireless communication between the robot and the driver station. This allows the robot to be controlled remotely during matches. The radio also connects to the field management system during competitions to enable match control and scoring.</p> <p></p>"},{"location":"week1-l2/#motor-controllers-eg-sparkmax","title":"Motor Controllers (e.g., SparkMax)","text":"<p>Motor controllers drive the motors of the robot based on commands from the RoboRIO. Different motor controllers have different features, but most provide advanced controls like speed control, current limiting, and encoder feedback. The SparkMax motor controller is a commonly used controller that can drive brushless motors, which provide better efficiency and performance than brushed motors.</p> <p></p>"},{"location":"week1-l2/#limit-switches","title":"Limit Switches","text":"<p>Limit switches are simple devices that tell the robot when it has reached a physical limit. When something makes contact with the switch, it closes an electrical circuit that the robot can detect. They are commonly used to prevent a robot from moving too far in one direction.</p> <p></p>"},{"location":"week1-l2/#encoders-and-hall-sensors","title":"Encoders and Hall Sensors","text":"<p>Encoders and Hall sensors are used to measure rotation. Encoders are often attached to motors or wheels and output pulses as they rotate. Hall sensors are a type of encoder that use magnets and are often built into motors. The robot can count these pulses to know how much the motor or wheel has rotated.</p> <p></p>"},{"location":"week1-l2/#gyroscopes","title":"Gyroscopes","text":"<p>Gyroscopes measure the robot's rotation about an axis. This can be used for balancing the robot, driving straight, or turning to a specific angle.</p> <p></p>"},{"location":"week1-l2/#cameras-and-limelight","title":"Cameras and Limelight","text":"<p>Cameras can provide a live video feed to the driver station or be used for computer vision tasks on the robot. The Limelight is a popular vision camera for FRC that has built-in processing for finding reflective vision targets.</p> <p></p>"},{"location":"week1-l2/#driver-station","title":"Driver Station","text":"<p>The Driver Station is a piece of software running on a laptop or other computer. It communicates with the robot via the radio, sending control inputs from the drivers and receiving data back from the robot.</p> <p></p>"},{"location":"week10-l1/","title":"SmartDashboard / Cameras","text":"<p>SmartDashboard is a key component in the FRC Control System produced by FIRST. It's a desktop application that provides a real-time view of the operation of your robot, by displaying values from your robot code. Whether you want to monitor sensor readings, tune parameters, or pick autonomous modes, SmartDashboard plays an integral role.</p>"},{"location":"week10-l1/#writing-data-to-smartdashboard","title":"Writing Data to SmartDashboard","text":"<p>To send data from your robot code to the SmartDashboard, use the static <code>putXXX</code> methods in the <code>SmartDashboard</code> class. Here's a breakdown:</p> <ol> <li>Sending Basic Data Types<ul> <li>Numbers: <code>SmartDashboard.putNumber(\"Speed\", 5.5);</code></li> <li>Strings: <code>SmartDashboard.putString(\"Status\", \"Running\");</code></li> <li>Booleans: <code>SmartDashboard.putBoolean(\"Is Active\", true);</code></li> </ul> </li> <li>Sending Complex Data Types<ul> <li>For any data type implementing the <code>Sendable</code> interface, you can put it directly:<pre><code>AnalogPotentiometer pot = new AnalogPotentiometer(1);\nSmartDashboard.putData(\"Potentiometer\", pot);\n</code></pre> </li> </ul> </li> </ol>"},{"location":"week10-l1/#reading-data-from-smartdashboard","title":"Reading Data from SmartDashboard","text":"<p>Reading from the SmartDashboard allows your robot to react to inputs or configurations set by drivers or operators.</p> <p>Fetching Basic Data Types - Numbers: <code>double speed = SmartDashboard.getNumber(\"Speed\", 0.0);</code> - Strings: <code>String status = SmartDashboard.getString(\"Status\", \"Default\");</code> - Booleans: <code>boolean isActive = SmartDashboard.getBoolean(\"Is Active\", false);</code></p> <p>The second argument in each method is a default value, which is returned if the specified key does not exist.</p>"},{"location":"week10-l1/#widgets-and-layouts","title":"Widgets and Layouts","text":"<p>The data you put on the SmartDashboard can be represented in various ways, called widgets. By default, SmartDashboard selects an appropriate widget based on the type of data. However, you can change this by right-clicking on an entry and selecting another widget.</p> <p>SmartDashboard also supports different layouts to help organize your data in a more logical or aesthetically pleasing manner. Experiment with the \"Add\" menu on SmartDashboard to see available options.</p>"},{"location":"week10-l1/#integrating-camera-feed-with-smartdashboard","title":"Integrating Camera Feed with SmartDashboard","text":"<p>A live camera feed can be invaluable for FRC teams, whether it's for drivers to better navigate the field or for processing images on the fly. The WPILib suite, in tandem with SmartDashboard, makes streaming a camera feed straightforward.</p> <p>Setting Up the Camera</p> <ol> <li> <p>Connect the Camera: Most teams use USB cameras due to their simplicity. Connect your camera to the roboRIO's USB port.</p> </li> <li> <p>Initialize the Camera in Code: You can utilize the CameraServer class to quickly start streaming a camera feed.</p> <p>import edu.wpi.first.cameraserver.CameraServer;</p> <p>// In your robot's initialization code: CameraServer.getInstance().startAutomaticCapture(); The above code automatically configures the camera with default settings and starts streaming.</p> </li> </ol>"},{"location":"week10-l1/#viewing-camera-feed-on-smartdashboard","title":"Viewing Camera Feed on SmartDashboard","text":"<ol> <li> <p>Open SmartDashboard: Once you've initialized your camera in code and the robot code is running, open the SmartDashboard.</p> </li> <li> <p>Add the Camera Stream: From the SmartDashboard menu, click on <code>View &gt; Add &gt; Camera Stream</code>. If your camera is streaming correctly, it should appear in the dropdown list. Select it, and the stream will appear on your SmartDashboard.</p> </li> <li> <p>Position and Resize: Like other widgets on the SmartDashboard, you can move and resize the camera stream to fit your layout preferences.</p> </li> </ol>"},{"location":"week10-l1/#additional-features","title":"Additional Features","text":"<ul> <li>Multiple Cameras: If you have multiple cameras on your robot, you can initialize each one and give them distinct names. This allows you to switch between different views on the SmartDashboard.             CameraServer.getInstance().startAutomaticCapture(0).setName(\"Front Camera\");             CameraServer.getInstance().startAutomaticCapture(1).setName(\"Rear Camera\");</li> <li>Adjusting Camera Settings: Many USB cameras allow settings adjustments like resolution, frames per second (FPS), and brightness. Refer to the camera's documentation and WPILib's <code>UsbCamera</code> class to tweak these settings programmatically. </li> </ul>"},{"location":"week10-l1/#tasks","title":"Tasks","text":"<ol> <li>Set up a basic robot project and write code that sends a variety of data types to the SmartDashboard.</li> <li>Experiment with retrieving data in your robot code that you set directly on the SmartDashboard.</li> <li>Connect a USB camera to your roboRIO and initialize it in your robot code.</li> <li>Display the camera feed on the SmartDashboard and adjust its position and size.</li> <li>Organize your dashboard using a layout of your choice.</li> </ol>"},{"location":"week10-l1/#additional-resources","title":"Additional Resources","text":"<p>WPILib: SmartDashboard Basics</p> <p>WPILib: Using the CameraServer on the roboRIO</p>"},{"location":"week10-l2/","title":"Autonomous","text":"<p>The ability for a robot to operate autonomously for a certain period can earn critical match points. Command-based programming is a paradigm used widely in FRC because it modularizes the robot's functionalities into individual commands, which can be chained together into complex routines during autonomous mode.</p> <p>The Smart Dashboard serves as a GUI for your robot when it is on the field. It can be used to select and observe different autonomous modes in real time.</p>"},{"location":"week10-l2/#writing-an-autonomous-mode","title":"Writing an Autonomous Mode","text":"<ol> <li>Commands and Subsystems: Before diving into the autonomous mode, understand your robot's capabilities. Break down the robot's functionalities into subsystems, like drivetrain, intake, shooter, etc. For each subsystem, you can create specific commands. For instance, for a drivetrain, commands could include DriveForward, Turn, etc.</li> </ol> <p>Sequencing Commands: Once individual commands are created, use command groups to sequence them. Here's a basic example:</p> <pre><code>public class SimpleAuto extends SequentialCommandGroup {\n    public SimpleAuto(Drivetrain drivetrain) {\n        addCommands(\n            new DriveForward(drivetrain, distance, speed),\n            new Turn(drivetrain, angle)\n        );\n    }\n}\n</code></pre> <p>In this example, <code>SimpleAuto</code> makes the robot drive forward for a certain distance and then turn by a specific angle.</p> <ol> <li> <p>Setting the Default Autonomous Command: In your <code>Robot</code> class or equivalent:</p> <p>@Override public void autonomousInit() {     new SimpleAuto(drivetrain).schedule(); }</p> </li> </ol>"},{"location":"week10-l2/#multiple-autos-and-selection-via-smart-dashboard","title":"Multiple Autos and Selection via Smart Dashboard","text":"<ol> <li> <p>Creating Multiple Autonomous Commands: Just as we created the <code>SimpleAuto</code> command group, create multiple command groups for each autonomous routine you need.</p> </li> <li> <p>SendableChooser for Autonomous Selection: The <code>SendableChooser</code> class is used to add multiple autonomous options and then fetch the selected one.</p> </li> </ol> <p>Initialize it:</p> <pre><code>SendableChooser&lt;Command&gt; m_chooser = new SendableChooser&lt;&gt;();\n</code></pre> <p>Populate with autos:</p> <pre><code>m_chooser.addOption(\"Simple Auto\", new SimpleAuto(drivetrain));\nm_chooser.addOption(\"Complex Auto\", new ComplexAuto(drivetrain, shooter));\nSmartDashboard.putData(\"Auto mode\", m_chooser);\n</code></pre> <p>Retrieving the Selected Auto: In your <code>autonomousInit</code> method, schedule the chosen command:</p> <pre><code>public void autonomousInit() {\n    m_chooser.getSelected().schedule();\n}\n</code></pre> <p>Now, when you deploy your code and open the Smart Dashboard, you should see a dropdown menu labelled \"Auto mode\". You can select your desired autonomous routine from this dropdown.</p>"},{"location":"week10-l2/#tasks","title":"Tasks","text":"<ol> <li>Create two or more autonomous routines using command groups.</li> <li>Set up the SendableChooser in your robot's initialization phase.</li> <li>Use the Smart Dashboard to select between these routines and test them out to ensure they run as expected during the autonomous phase.</li> </ol> <p>Answers</p>"},{"location":"week10-l2/#additional-resources","title":"Additional Resources","text":"<p>(WPILib: Command-Based Programming)[https://docs.wpilib.org/en/stable/docs/software/commandbased/index.html]</p> <p>(WPILib: SmartDashboard and SendableChooser)[https://docs.wpilib.org/en/stable/docs/software/dashboards/smartdashboard/smartdashboard-intro.html]</p>"},{"location":"week11/","title":"Week 11 - PID Tuning","text":"<p>Proportional-Integral-Derivative (PID) control is a tried and true method used in robotics (and many other fields) to achieve a desired system response by adjusting control inputs. PID control takes a desired target (setpoint) and the current state of a system (process variable) and calculates the necessary output to make the process variable match the setpoint.</p>"},{"location":"week11/#the-basics","title":"The Basics","text":"<ol> <li>Proportional (P): The difference between the setpoint and the process variable is called the error. The proportional term adjusts the output in proportion to this error. If the error is large, the proportional term produces a large output.</li> <li>Integral (I): This is concerned with the accumulation of errors over time. If the error has been present for an extended period, it will accumulate, and the integral term will seek to eliminate it.</li> <li>Derivative (D): This anticipates future behavior of the error by understanding its rate of change. If the error is rapidly increasing, the derivative term works to counteract this.</li> </ol>"},{"location":"week11/#implementing-pid-on-the-sparkmax-motor-controllers","title":"Implementing PID on the SparkMax Motor Controllers:","text":"<p>Here's how you can implement position control with the SparkMax motor controllers:</p> <pre><code>import com.revrobotics.CANSparkMax;\nimport com.revrobotics.ControlType;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n\n    private final CANSparkMax sparkMax = new CANSparkMax(1, CANSparkMax.MotorType.kBrushless);\n\n    @Override\n    public void robotInit() {\n        // Reset encoder count to ensure we're starting from 0\n        sparkMax.getEncoder().setPosition(0);\n\n        // Set PID constants. You'll tune these values!\n        sparkMax.getPIDController().setP(0.1);\n        sparkMax.getPIDController().setI(0.0);\n        sparkMax.getPIDController().setD(0.0);\n\n        // Set the desired position setpoint (e.g., 1000 encoder counts)\n        sparkMax.getPIDController().setReference(1000, ControlType.kPosition);\n    }\n\n    @Override\n    public void teleopPeriodic() {\n        // Your teleoperated code here\n    }\n}\n</code></pre>"},{"location":"week11/#tuning-position-pid","title":"Tuning Position PID","text":"<ol> <li>Set Initial Values: Start with all PID values at 0.</li> <li>Tune P: Slowly increase P until your system starts to oscillate around the desired position. Once you observe oscillations, reduce P a bit until they stop.</li> <li>Tune I: Introduce a bit of I. If your mechanism consistently stops a bit short or a bit past the target (known as steady-state error), I can help correct this. However, be wary: too much I can cause overshoot or oscillations.</li> <li>Tune D: Introduce D to counteract the overshoot or oscillations introduced by P and I. Remember, a small amount of D can go a long way, and too much can make the system unstable.</li> <li>Iterate: Go back and adjust each term as necessary, bearing in mind that changes to one term might necessitate changes to the others.</li> </ol> <p>Remember that the actual values you'll need for P, I, and D will vary based on the specifics of your robot, such as the weight of moving parts, friction, and the characteristics of the motor and gearing.</p> <p>In practice, position control PID tuning often requires more patience than velocity control because you're trying to get the system to settle at a precise value, rather than maintain a steady state. As always, it's crucial to make changes incrementally and observe how each change affects system behavior.</p>"},{"location":"week11/#tasks","title":"Tasks","text":"<ol> <li>Implement the provided PID control structure for SparkMax on your robot's drivetrain or any mechanism. Try achieving a specific speed or position.</li> <li>Tune the PID parameters, start with P, then introduce I and D as necessary. Remember, often you'll adjust one, then have to go back and readjust the others.</li> <li>Incorporate a sensor, like an encoder, to get feedback from the mechanism and give the PID controller a process variable to work with.</li> <li>Challenge: Introduce external disturbances (e.g., manually slowing down a wheel) and see how well your PID-controlled system can handle and correct for it.</li> </ol>"},{"location":"week11/#additional-resources","title":"Additional Resources","text":"<p>PID Explained</p> <p>REV Robotics SparkMax Documentation</p> <p>WPILib PIDController Documentation</p> <p>Happy tuning! Remember, while the math behind PID control might seem complicated, the essence of what it's trying to achieve is straightforward: get your system to behave the way you want it to. With enough practice and observation, you'll develop an intuition for how to tune these systems efficiently.</p>"},{"location":"week12/","title":"Week 12 - Putting it all together","text":"<p>Now that you've delved into the individual aspects of FRC robot programming, it's time to consolidate that knowledge. In this lesson, we're going to construct a robot that comprises multiple subsystems and functionalities.</p>"},{"location":"week12/#robot-description","title":"Robot Description","text":"<ol> <li>Tank Drive: Allows the robot to move forwards, backwards, and turn using two motor controllers.</li> <li>Pivoting Arm: Moves up and down using a motor. Has specific set positions.</li> <li>Claw: Positioned at the end of the arm, it opens and closes using a solenoid.</li> </ol>"},{"location":"week12/#requirements","title":"Requirements","text":"<ol> <li>Consolidate the above code into a functional robot program.</li> <li>Organize the code using the Command-Based framework. Separate each functional part (Tank Drive, Pivoting Arm, Claw) into their respective subsystems and commands.</li> <li>Enhance the code by adding safety features (e.g., make sure the arm doesn't pivot beyond its physical constraints).</li> <li>Test the robot in a simulated environment.</li> <li>Add multiple autonomous modes to your robot</li> </ol> <p>Answers</p>"},{"location":"week13/","title":"Week 13 - PathWeaver","text":"<p>Understanding and programming robot trajectories can be challenging. Fortunately, there are tools like Pathweaver, provided by WPILib, which simplify this task. In this lesson, we'll dive into Pathweaver, understanding its utility, capturing required measurements, and implementing the generated paths in code.</p>"},{"location":"week13/#what-is-pathweaver","title":"What is Pathweaver?","text":"<p>Pathweaver is a graphical interface tool for generating complex robot paths or trajectories. By setting waypoints and defining curves, teams can direct their robots to follow specific paths on the field. These paths can be exported and utilized within robot code, ensuring accurate and optimized robot movement during matches.</p>"},{"location":"week13/#capturing-required-measurements-for-the-robot","title":"Capturing Required Measurements for the Robot","text":"<p>To achieve optimal performance with Pathweaver, you'll need accurate robot measurements. Specifically:</p> <ol> <li> <p>Wheelbase Width and Track Width: Measure the distance between wheels on each side (left-to-right) for wheelbase width and front-to-back for track width.</p> </li> <li> <p>Robot Max Velocity and Acceleration: These can be obtained either through testing or by referring to the motor and gearbox specifications. Real-world testing is recommended for better accuracy.</p> </li> </ol>"},{"location":"week13/#getting-started-with-pathweaver","title":"Getting Started with Pathweaver","text":"<ol> <li>Open Pathweaver from your WPILib Tools</li> <li>Create a New Project:<ul> <li>Click 'Create Project'</li> <li>Select a Project Directory</li> <li>Select an Output Directory</li> <li>Select the correct Game.</li> <li>Length Unit: Meter</li> <li>Export Unit: Always Meters</li> <li>Max Velocity/Max Acceleration/Track Width: Details based on your specific robot</li> <li>Click 'Create Projet'</li> </ul> </li> </ol>"},{"location":"week13/#pathweaver-user-interface","title":"PathWeaver User Interface","text":"<p>The PathWeaver user interface consists of the following: </p> <ol> <li>The field area in the top left corner, which takes up most of the PathWeaver window. Trajectories are drawn on this part of the program.</li> <li>The properties of the currently selected waypoint are displayed in the bottom pane. These properties include the X and Y, along with the tangents at each point.</li> <li>A group of paths (or an \u201cautonomous\u201d mode) is displayed on the upper right side of the window. This is a convenient way of seeing all of the trajectories in a single auto mode.</li> <li>The individual paths that a robot might follow are displayed in the lower right side of the window.</li> <li>The \u201cBuild Paths\u201d button will export the trajectories in a JSON format. These JSON files can be used from the robot code to follow the trajectory.</li> <li>The \u201cEdit Project\u201d button allows you to edit the project properties.</li> </ol>"},{"location":"week13/#using-pathweaver","title":"Using Pathweaver","text":"<ol> <li>Creating the Initial Trajectory: To start creating a trajectory, click the + (plus) button in the path window. A default trajectory will be created that probably does not have the proper start and end points that you desire. The path also shows the tangent vectors (teal lines) for the start and end points. Changing the angle of the tangent vectors changes the shape of the trajectory.  Drag the start and end points of the trajectory to the desired locations. Notice that in this case, the default trajectory does not start in a legal spot for the 2019 game. We can drag the initial waypoint to make the robot start on the HAB.</li> <li>Changing a Waypoint Heading: The robot heading can be changed by dragging the tangent vector (teal) line. Here, the final waypoint was dragged to the desired final pose and was rotated to face the rocket. </li> <li>Adding Additional Waypoints to Control the Robot Path: Adding additional waypoints and changing their tangent vectors can affect the path that is followed. Additional waypoints can be added by dragging in the middle of the path. In this case, we added another waypoint in the middle of the path. </li> <li>Locking the Tangent Lines: Locking tangent lines prevents them from changing when the trajectory is being manipulated. The tangent lines will also be locked when the point is moved.</li> <li>More Precise control of Waypoints: While PathWeaver makes it simple to draw trajectories that the robot should follow, it is sometimes hard to precisely set where the waypoints should be placed. In this case, setting the waypoint locations can be done by entering the X and Y value which might come from an accurate CAD model of the field. The points can be entered in the X and Y fields when a waypoint is selected.</li> </ol>"},{"location":"week13/#implementing-the-path-in-code","title":"Implementing the Path in Code","text":"<ol> <li> <p>Export Path: After building paths in Pathweaver, export them to a directory in your robot project.</p> </li> <li> <p>Utilize WPILib Trajectory Utilities:</p> <p>import edu.wpi.first.wpilibj.trajectory.Trajectory; import edu.wpi.first.wpilibj.trajectory.TrajectoryUtil; import java.nio.file.Paths;</p> <p>Trajectory trajectory = TrajectoryUtil.fromPathweaverJson(Paths.get(\"YourPathWeaverOutput.json\"));</p> </li> </ol>"},{"location":"week13/#tasks","title":"Tasks","text":"<ol> <li>Create Your First Path: Launch Pathweaver and create a simple S-shaped path on the field. Export this path.</li> <li>Implement Path in Code: Use the above-mentioned steps to integrate your generated path into your robot code. Execute this path in a simulator or on the actual robot.</li> <li>Modify Robot Parameters: Tweak robot velocity, acceleration, and other parameters in Pathweaver. Observe the effects of these changes in execution.</li> <li>Complex Path Creation: Try creating a more complex path that utilizes the full potential of Pathweaver\u2019s waypoint and curve system. Integrate and execute this path.</li> </ol>"},{"location":"week13/#additional-resources","title":"Additional Resources","text":"<p>Pathweaver Documentation</p> <p>WPILib Trajectory Documentation</p>"},{"location":"week13/#references","title":"References","text":"<p>WPILib PathWeaver</p>"},{"location":"week2-l1/","title":"Variables and Data Types","text":"<p>In Java, as in other programming languages, variables are a fundamental concept. Variables are used to store information which can be used elsewhere in your code. In this lesson, we'll cover what variables are, what data types are, how to declare a variable, and how to use a variable.</p>"},{"location":"week2-l1/#variables","title":"Variables","text":"<p>Think of a variable as a name for a location in memory. This location can store a data value, and the variable name can be used to access and manipulate that value. For example, if you have a variable named speed, you can use that variable to both store and retrieve the speed of your robot.</p>"},{"location":"week2-l1/#data-types","title":"Data Types","text":"<p>Each variable in Java has a specific data type, which determines the kind of values the variable can hold. The common ones we will use are:</p> <ul> <li><code>int</code> - An integer (whole number), such as 5 or -100</li> <li><code>double</code> - A decimal number, such as 3.14 or -0.01</li> <li><code>boolean</code> - A truth value, either true or false</li> <li><code>char</code> - A single character, such as 'A' or 'z'</li> <li><code>String</code> - stores text, such as \"Hello\", String values are surrondewd by double quotes.</li> </ul>"},{"location":"week2-l1/#declaring-variables","title":"Declaring Variables","text":"<p>Before you can use a variable, you must declare it. Declaring a variable tells the Java compiler what the variable's name is and what type of data it will hold. Here is the syntax for declaring a variable in Java:</p> <pre><code>&lt;dataType&gt; &lt;variableName&gt;;\n</code></pre> <p>For example, to declare an integer variable named speed, you would write:</p> <pre><code>int speed;\n</code></pre>"},{"location":"week2-l1/#assigning-values-to-variables","title":"Assigning Values to Variables","text":"<p>After you've declared a variable, you can assign a value to it using the = operator. Here's how you would assign the value 10 to the speed variable:</p> <pre><code>speed = 10;\n</code></pre> <p>You can also declare a variable and assign a value to it at the same time, like this:</p> <pre><code>int speed = 10;\n</code></pre>"},{"location":"week2-l1/#using-variables","title":"Using Variables","text":"<p>Once a value has been assigned to a variable, you can use that variable anywhere you could use the value itself. For example, you could use the speed variable to calculate the time it takes for the robot to travel a certain distance:</p> <pre><code>int speed = 2; // speed of the robot in meter per second (m/s)\nint distance = 10; // distance the robot needs to travel in metres\n</code></pre> <p>Here, speed and distance are variables holding the values 2 and 10, respectively. We can use these variables to calculate the time it would take for the robot to travel that distance.</p> <pre><code>double time = distance / speed;\n</code></pre> <p>This line of code calculates the time by dividing the distance by the speed (10 / 2), so time will be 5.0. This tells us it would take 5 seconds for the robot to travel 10 metres at a speed of 2 m/s.</p>"},{"location":"week2-l1/#tasks","title":"Tasks","text":"<p>For this week's tasks, we'll be practicing working with variables and data types.</p> <p>Before we start, let's setup our environment:</p> <ol> <li>Open Visual Studio Code (VS Code).</li> <li>Click on File -&gt; New Java Class to create a new file.</li> <li>Save this file as Week2Task1.java on your Desktop or a folder where you prefer to keep your tasks.</li> </ol> <p>Now that you've set up the file, let's get started with the tasks.</p> <ol> <li>Declare an integer variable named distance and assign it a value of 100.</li> <li>Declare a double variable named time and assign it a value of 10.0.</li> <li>Declare a double variable named speed but don't assign it a value yet.</li> <li>Calculate the speed by dividing distance by time and assign the result to speed.</li> <li>Print the value of speed to the terminal.</li> </ol> <p>Answers</p>"},{"location":"week2-l1/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Data Types</p> <p>W3 Schools - Variables</p> <p>W3 Schools - Strings</p> <p>W3 Schools - Booleans</p> <p>Oracle Java Documentation - Primitive Data Types:</p> <p>Oracle Java Documentation - Variables:</p>"},{"location":"week2-l2/","title":"Operators","text":"<p>In Java, operators are special symbols that perform operations on variables and values. They are an essential part of most programming languages and allow us to perform both basic and complex operations. In this lesson, we'll cover the three main types of operators: arithmetic, relational, and logical.</p>"},{"location":"week2-l2/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operators are used to perform common mathematical operations. In Java, these are:</p> <ul> <li><code>+</code> : Addition</li> <li><code>-</code> : Subtraction</li> <li><code>*</code> : Multiplication</li> <li><code>/</code> : Division</li> <li><code>%</code> : Modulus (remainder)</li> </ul> <p>Here's an example of how to use arithmetic operators in Java:</p> <pre><code>int a = 10;\nint b = 20;\n\n// Addition\nint sum = a + b; // sum is now 30\n\n// Subtraction\nint difference = a - b; // difference is now -10\n\n// Multiplication\nint product = a * b; // product is now 200\n\n// Division\nint quotient = b / a; // quotient is now 2\n\n// Modulus\nint remainder = b % a; // remainder is now 0\n</code></pre>"},{"location":"week2-l2/#relational-operators","title":"Relational Operators","text":"<p>Relational operators are used to compare two values. They return a boolean result: <code>true</code> if the comparison is true, and <code>false</code> otherwise. The relational operators in Java are:</p> <ul> <li><code>==</code> : Equal to</li> <li><code>!=</code> : Not equal to</li> <li><code>`&gt;</code> : Greater than</li> <li><code>&lt;</code>  \u00a0\u00a0: Less than</li> <li><code>&gt;=</code> : Greater than or equal to</li> <li><code>&lt;=</code> : Less than or equal to</li> </ul> <p>Here's an example of using relational operators:</p> <pre><code>int a = 10;\nint b = 20;\n\nboolean isEqual = (a == b); // isEqual is false\nboolean isNotEqual = (a != b); // isNotEqual is true\nboolean isGreater = (a &gt; b); // isGreater is false\nboolean isLesser = (a &lt; b); // isLesser is true\nboolean isGreaterOrEqual = (a &gt;= b); // isGreaterOrEqual is false\nboolean isLesserOrEqual = (a &lt;= b); // isLesserOrEqual is true\n</code></pre>"},{"location":"week2-l2/#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to combine two or more conditions. They return a boolean result based on the truthfulness of the conditions. Java includes the following logical operators:</p> <ul> <li><code>&amp;&amp;</code> : Logical AND (returns true if both conditions are true)</li> <li><code>||</code> : Logical OR (returns true if either condition is true)</li> <li><code>!</code>  \u00a0\u00a0: Logical NOT (returns true if the condition is false)</li> </ul> <p>Here's an example of using logical operators:</p> <pre><code>int a = 10;\nint b = 20;\n\nboolean andResult = (a &gt; b) &amp;&amp; (a != b); // andResult is false\nboolean orResult = (a &lt; b) || (a != b); // orResult is true\nboolean notResult = !(a == b); // notResult is true\n</code></pre>"},{"location":"week2-l2/#tasks","title":"Tasks","text":"<p>Now, let's practice using the operators we've learned about. In a new Java file named  <code>Week2Task2.java</code>, complete the following tasks:</p> <p>Here are some tasks you can do to practice with operators:</p> <ol> <li>Declare two integer variables a and b, and assign them the values 10 and 20, respectively.</li> <li>Use each of the arithmetic operators (+, -, *, /, %) to perform operations on a and b. Print out the results of each operation.</li> <li>Use each of the relational operators (==, !=, &gt;, &lt;, &gt;=, &lt;=) to compare a and b. Print out the results of each comparison.</li> <li>Use each of the logical operators (&amp;&amp;, ||, !) to combine two boolean conditions. You could, for instance, check if a and b are both greater than 5, or if either a or b is greater than 25, or if it's not the case that a and b are equal. Print out the results of each operation.</li> </ol> <p>Remember, experimentation is a great way to learn. Try changing the values of a and b or the conditions you're checking and see how the output changes!</p> <p>Answers</p>"},{"location":"week2-l2/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Operators</p>"},{"location":"week2-l3/","title":"Scope and Constants","text":""},{"location":"week2-l3/#constants","title":"Constants","text":"<p>In Java, constants are special variables whose values cannot be changed once they are initialized. This is useful when you have a value that you know will never change, such as the value of pi or the maximum speed of your robot. Constants are typically declared using the <code>final</code> keyword followed by the data type, name, and initial value. For example, you could declare a constant for the maximum speed of your robot like this:</p> <pre><code>final double MAX_SPEED = 5.0;\n</code></pre> <p>Once you have declared this constant, you cannot change its value. If you try to do so, the Java compiler will give you an error. This helps to prevent bugs where you accidentally change a value that should remain constant.</p>"},{"location":"week2-l3/#scope-of-variables","title":"Scope of Variables","text":"<p>The scope of a variable in Java refers to the region of code where the variable can be accessed. The scope is determined by where a variable is declared. For example, if a variable is declared inside a method, it is a local variable and can only be used within that method:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n\n        // Code here CANNOT use x\n\n        int x = 100;\n\n        // Code here can use x\n        System.out.println(x);\n    }\n}\n</code></pre> <p>On the other hand, if a variable is declared as a class attribute, it is a class (or instance) variable and can be used by all methods in the class:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n\n        // Code here CANNOT use x\n\n        { // This is a block\n\n        // Code here CANNOT use x\n\n        int x = 100;\n\n        // Code here CAN use x\n        System.out.println(x);\n\n        } // The block ends here\n\n    // Code here CANNOT use x\n\n    }\n}\n</code></pre>"},{"location":"week2-l3/#tasks","title":"Tasks","text":"<p>For this week's tasks, we'll be practicing working with variables and data types.</p> <ol> <li> <p>At the top of your program, declare a constant named <code>PI</code> that has a <code>double</code> type and assign it the value of <code>3.14</code>.</p> </li> <li> <p>Declare a variable of type <code>double</code> named <code>radius</code> and assign it a value of <code>5.0</code>.</p> </li> <li> <p>Calculate the area of a circle using the formula <code>PI * radius * radius</code> and assign the result to a <code>double</code> variable named <code>area</code>. Print the value of <code>area</code>.</p> </li> <li> <p>Now, change the value of <code>radius</code> to <code>10.0</code> and calculate the <code>area</code> again, storing the result in the <code>area</code> variable. Print the value of <code>area</code> again. This should demonstrate how variables can be reassigned.</p> </li> <li> <p>Declare two <code>String</code> variables, <code>teamMemberName</code> and <code>teamName</code>. Assign any names you like to these variables.</p> </li> <li> <p>Declare a <code>String</code> variable greeting and assign a personalized greeting message that includes both <code>teamMemberName</code> and <code>teamName</code> using <code>String</code> concatenation. For example, the message could be \"Hello, \" + <code>teamMemberName</code> + \"! Welcome to team \" + <code>teamName</code> + \".\" Print the <code>greeting</code>.</p> </li> <li> <p>Reassign different values to <code>teamMemberName</code> and <code>teamName</code>, then create a new <code>greeting</code> message by again assigning to the <code>greeting</code> variable. Print the new <code>greeting</code>. This will show that you can update the contents of a string variable and print out new information.</p> </li> </ol>"},{"location":"week2-l3/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Java Scope</p> <p>W3 Schools - Variables</p>"},{"location":"week2-preface/","title":"Comments","text":"<p>Comments in Java are notes that you can insert at various points in your code. They don't affect the execution of the code in any way, but they can be extremely helpful in explaining what certain parts of your code do, and why they do it. This can make your code easier to understand for both yourself and others who might work on your code in the future.</p> <p>There are two types of comments in Java:</p> <ol> <li> <p>Single-line comments: These start with // and only apply to the text on the same line.     // This is a single-line comment     int speed = 10; // This comment is at the end of a line of code</p> </li> <li> <p>Multi-line comments: These start with <code>/*</code> and end with <code>*/</code>. They can span multiple lines.     / This is a     multi-line     comment /</p> </li> </ol> <p>It's a good practice to comment your code regularly and clearly, especially when writing complex programs. In this guide, we will use comments extensively to provide additional details and explanation for various lines of code, enhancing your understanding of Java programming.</p>"},{"location":"week2-preface/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Comments</p>"},{"location":"week3-l1/","title":"If-Else Statements","text":"<p>In Java, just like in real life, we often need to make decisions based on certain conditions. If it's raining, we take an umbrella. If it's not, we don't. In programming, we use conditional statements - specifically, <code>if-else</code> statements - to make these kinds of decisions.</p>"},{"location":"week3-l1/#if-else-statements","title":"If-Else Statements","text":"<p>An <code>if</code> statement in Java performs a test and executes the following code block if the test evaluates to <code>true</code>. Here's an example:</p> <pre><code>int speed = 20;\n\nif(speed &gt; 10) {\n    System.out.println(\"The robot is moving fast.\");\n}\n</code></pre> <p>In this code, <code>speed &gt; 10</code> is the test. If it's true (which it is, since 20 is greater than 10), the message \"The robot is moving fast.\" will be printed to the terminal.</p> <p>An <code>else</code> statement can be added to an <code>if</code> statement to provide code that will be executed if the test is false. Here's an example:</p> <pre><code>int speed = 20;\n\nif(speed &gt; 30) {\n    System.out.println(\"The robot is moving fast.\");\n} else {\n    System.out.println(\"The robot is moving at a normal speed or is stationary.\");\n}\n</code></pre> <p>In this case, since <code>speed &gt; 30</code> is false (20 is not greater than 30), the message \"The robot is moving at a normal speed or is stationary.\" will be printed.</p>"},{"location":"week3-l1/#nested-if-else-statements","title":"Nested If-Else Statements","text":"<p>We can also nest <code>if-else</code> statements inside each other to make more complex decisions. Here's an example:</p> <pre><code>int speed = 20;\n\nif(speed &gt; 30) {\n    System.out.println(\"The robot is moving fast.\");\n} else if(speed &gt; 10) {\n    System.out.println(\"The robot is moving at a normal speed.\");\n} else {\n    System.out.println(\"The robot is stationary.\");\n}\n</code></pre> <p>In this case, the program first checks if <code>speed &gt; 30</code>. If that's false, it then checks <code>speed &gt; 10</code>. If that's true, it prints \"The robot is moving at a normal speed.\" If it were false, it would print \"The robot is stationary.\"</p>"},{"location":"week3-l1/#tasks","title":"Tasks","text":"<p>For this week's tasks, we'll be practicing working with <code>if-else</code> statements. In a new Java file named  <code>Week3Task1.java</code>, complete the following tasks:</p> <ol> <li>Declare an integer variable named temperature and assign it a value of 20.</li> <li>Use an if-else statement to print \"It's hot.\" if temperature is above 30, \"It's warm\" if temperature is above 15, and \"It's cold.\" otherwise.</li> <li>Try changing the value of temperature and see how the output changes!</li> </ol> <p>Answers</p>"},{"location":"week3-l1/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - If ... Else</p>"},{"location":"week3-l2/","title":"Switch-Case Statements","text":"<p>In Java, switch-case statements serve as an efficient way to have a sequence of if-else statements. It is a multi-way branch statement that provides an easy way to dispatch execution to different parts of code based on the value of an expression.</p>"},{"location":"week3-l2/#switch-case-statements","title":"Switch-Case Statements","text":"<p>The <code>switch</code> statement evaluates an expression and attempts to match the expression's value to a <code>case</code> label. If a match is found, the code within that <code>case</code> is executed.</p> <p>Here is the general syntax for a switch-case statement:</p> <pre><code>switch (expression) {\n    case value1:\n        // code to be executed if expression equals value1;\n        break; // optional\n    case value2:\n        // code to be executed if expression equals value2;\n        break; // optional\n    ...\n    default:\n        // code to be executed if expression doesn't match any case values;\n}\n</code></pre> <p>A <code>switch-case</code> statement can have numerous case options. The <code>break</code> keyword is used to exit the switch-case statement and stop the execution of more code and case testing within the block. If <code>break</code> is omitted, the program continues to the next case, executing the statements until a <code>break</code>, or the end of the switch statement is encountered.</p> <p>The <code>default</code> keyword specifies code to run if there is no case match. The <code>default</code> statement must be the last case in a switch.</p> <p>Let's consider an example:</p> <pre><code>int day = 3;\n\nswitch (day) {\n    case 1:\n        System.out.println(\"Monday\");\n        break;\n    case 2:\n        System.out.println(\"Tuesday\");\n        break;\n    case 3:\n        System.out.println(\"Wednesday\");\n        break;\n    //... we can continue this pattern for all days of the week.\n    default:\n        System.out.println(\"Invalid day\");\n}\n</code></pre> <p>In this code, the <code>switch</code> statement evaluates <code>day</code>, and when a case matches the value of <code>day</code>, the corresponding code block is executed. For example, if <code>day</code> equals 3, \"Wednesday\" will be printed to the terminal. If <code>day</code> doesn't match any case, the <code>default</code> statement is executed, and \"Invalid day\" is printed.</p>"},{"location":"week3-l2/#tasks","title":"Tasks","text":"<p>For this week's tasks, we'll be practicing working with <code>switch-case</code> statements. In a new Java file named <code>Week3Task2.java</code>, complete the following tasks:</p> <ol> <li>Declare an integer variable named month and assign it a value of 5.</li> <li>Use a switch-case statement to print the name of the month corresponding to that number (1 for January, 2 for February, and so on).</li> <li>Add a default case to print \"Invalid month\" if the value of month is not between 1 and 12.</li> <li>Try changing the value of month and see how the output changes!</li> </ol> <p>Answers</p>"},{"location":"week3-l2/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Switch Case Oracle Java Documentation - Switch Statement</p>"},{"location":"week4-l1/","title":"Loops","text":"<p>In programming, loops are used to repeatedly execute a block of code as long as a certain condition is met. They are essential to many tasks in programming, from running calculations on multiple data values to game logic.</p> <p>In Java, there are three main types of loops:</p> <ol> <li><code>For loop</code>: Executes a block of code a specific number of times.</li> <li><code>While loop</code>: Executes a block of code as long as a certain condition is true.</li> <li><code>Do-While loop</code>: Executes a block of code at least once, and then repeats as long as a certain condition is true.</li> </ol> <p>Here's how each one can be used in Java:</p>"},{"location":"week4-l1/#for-loop","title":"For loop","text":"<pre><code>for (int i = 0; i &lt; 5; i++) {\n    System.out.println(\"The value of i is: \" + i);\n}\n</code></pre> <p>This for loop prints the value of <code>i</code> five times. It starts by setting <code>i</code> to 0. Then, before each iteration, it checks if <code>i</code> is less than 5. If it is, it executes the code block and then increments <code>i</code> by 1. Once <code>i</code> is no longer less than 5, it stops.</p>"},{"location":"week4-l1/#while-loop","title":"While loop","text":"<pre><code>int j = 0;\nwhile (j &lt; 5) {\n    System.out.println(\"The value of j is: \" + j);\n    j++;\n}\n</code></pre> <p>This while loop does the same thing as the previous for loop. It starts by setting <code>j</code> to 0. Then, as long as <code>j</code> is less than 5, it prints the value of <code>j</code> and increments <code>j</code> by 1.</p>"},{"location":"week4-l1/#do-while-loop","title":"Do-While loop","text":"<pre><code>int k = 0;\ndo {\n    System.out.println(\"The value of k is: \" + k);\n    k++;\n} while (k &lt; 5);\n</code></pre> <p>This do-while loop also does the same thing as the other loops. However, it ensures the block of code is executed at least once before checking the condition.</p>"},{"location":"week4-l1/#nested-loops-and-loop-control-statements","title":"Nested Loops and Loop Control Statements","text":"<p>You can also put a loop inside another loop to form a nested loop. In Java, a <code>break</code> statement can be used to exit a loop prematurely, and a <code>continue</code> statement can be used to skip to the next iteration of the loop.</p>"},{"location":"week4-l1/#tasks","title":"Tasks","text":"<ol> <li>Write a for loop that prints the numbers 1 to 10.</li> <li>Write a while loop that prints the numbers 1 to 10.</li> <li>Write a do-while loop that prints the numbers 1 to 10.</li> <li> <p>Write a nested for loop that prints a 5x5 matrix of asterisks (*). Example:</p> <pre><code>*****\n*****\n*****\n*****\n*****\n</code></pre> </li> <li> <p>Write a for loop that prints the numbers 1 to 10, but uses a <code>break</code> statement to exit the loop when the loop variable is 6.</p> </li> <li>Write a for loop that prints the numbers 1 to 10, but uses a <code>continue</code> statement to skip printing the number 5.</li> </ol> <p>Answers</p>"},{"location":"week4-l1/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - For Loop</p> <p>W3 Schools - While Loop</p> <p>Oracle Java Documentation - The for Statement</p> <p>Oracle Java Documentation - The while and do-while Statements</p>"},{"location":"week4-l2/","title":"Functions","text":""},{"location":"week4-l2/#what-are-functions","title":"What are functions?","text":"<p>A function (or method, as they are often called in Java) is a self-contained block of code that performs a specific task. Functions are crucial in programming because they help us break down our code into reusable pieces. We can call the same function any number of times, which saves us from having to write the same code repeatedly.</p> <p>Here's an example of a simple function in Java:</p> <pre><code>void greet() {\n    System.out.println(\"Hello, world!\");\n}\n</code></pre> <p>This function, named <code>greet</code>, prints the string \"Hello, world!\" when called. To call a function, you use its name followed by parentheses. For example, <code>greet();</code></p>"},{"location":"week4-l2/#function-declaration-parameters-and-return-values","title":"Function declaration, parameters, and return values","text":"<p>Functions in Java have a specific structure. They begin with a declaration, which includes the function's return type, name, and parameters.</p> <p>The return type is the type of data the function sends back when it's finished. If a function doesn't need to return any data, you can use the keyword <code>void</code> for the return type.</p> <p>Parameters (also called arguments) are values that we can pass into a function when we call it. These values can then be used within the function. Parameters are optional; a function can have none, one, or many.</p> <p>Here's an example of a function that takes parameters and returns a value:</p> <pre><code>int addNumbers(int num1, int num2) {\n    int sum = num1 + num2;\n    return sum;\n}\n</code></pre> <p>In this example, <code>addNumbers</code> is a function that takes two integers as parameters (<code>num1</code> and <code>num2</code>) and returns their sum.</p> <p>To call this function, you would write <code>addNumbers(5, 3);</code>, which would return the integer 8.</p>"},{"location":"week4-l2/#tasks","title":"Tasks","text":"<p>In a new Java file named Week4Task2.java, complete the following tasks:</p> <ol> <li>Write a function named calculateArea that takes two parameters: length and width. This function should return the product of length and width, which represents the area of a rectangle.</li> <li>Call your calculateArea function with different values for length and width and print the results.</li> <li>Write a function named sayHelloToUser that takes one parameter: name. This function should print a personalized greeting, like \"Hello, [name]!\"</li> <li>Call your sayHelloToUser function with different names and observe the output.</li> </ol> <p>Answers</p>"},{"location":"week4-l2/#additional-resources","title":"Additional Resources","text":"<p>W3Schools - Java Methods</p> <p>Oracle - Defining Methods</p> <p>GeeksforGeeks - Functions in Java</p>"},{"location":"week5-l1/","title":"Introduction to Object-Oriented Programming (OOP)","text":"<p>OOP is a programming paradigm that uses \"objects\" \u2013 instances of classes \u2013 which are capable of holding data in the form of fields (also known as properties or attributes) and methods. OOP focuses on the objects that developers want to manipulate rather than the logic required to manipulate them.</p> <p>There are four primary principles of OOP:</p> <ol> <li> <p><code>Encapsulation</code>: This is the practice of keeping fields within a class private, then providing access to them via public methods. It\u2019s a protective barrier that keeps the data and code safe within the class itself.</p> </li> <li> <p><code>Inheritance</code>: This is the process where one class adopts the properties (fields) and methods of another. With inheritance, we can reuse the code, making the program easier to develop and understand.</p> </li> <li> <p><code>Polymorphism</code>: This allows us to perform a single action in different ways. Polymorphism allows us to define one interface and have multiple implementations.</p> </li> <li> <p><code>Abstraction</code>: This is a process of hiding the implementation details and showing only the functionality to the users. Abstraction lets us focus on what the object does instead of how it does it.</p> </li> </ol> <p>Understanding and applying these principles will allow you to write more efficient, effective, and manageable code.</p>"},{"location":"week5-l1/#why-oop-is-useful-in-programming","title":"Why OOP is Useful in Programming","text":"<p>OOP provides a clear structure for the programs. OOP helps to keep the Java code DRY (Don't Repeat Yourself), which makes the code easier to maintain, modify and debug. It also makes it possible to create full reusable applications with less code and shorter development time.</p> <p>Object-oriented Programming in 7 minutes | Mosh (YouTube)</p>"},{"location":"week5-l1/#tasks","title":"Tasks","text":"<p>To test your understanding of OOP principles, your task for this week is to answer the following questions:</p> <ol> <li>What are the main principles of Object-Oriented Programming and how would you describe each one in your own words?</li> <li>Why are these principles important and how do they make programming easier or more effective?</li> <li>Can you think of a real-world analogy for each of the four principles? For example, a Library could be an analogy for encapsulation, as it keeps the books (data) protected and organized, and provides a specific interface (librarian/methods) to access them.</li> </ol>"},{"location":"week5-l2/","title":"Classes and Objects in Java","text":"<p>In Java, classes and objects are the fundamental components of object-oriented programming. A class is a blueprint or template from which objects are created. In essence, it is a user-defined data type that encapsulates data and methods that can operate on that data.</p> <p>A class can be seen as an abstraction that defines what data and operations will be associated with objects of that class. Data are represented by the class's attributes or fields, while operations are represented by the class's methods.</p> <p>For instance, consider a <code>Car</code> class. The class can specify that each <code>Car</code> object will have attributes like <code>color</code>, <code>brand</code>, and <code>speed</code>, and methods such as <code>accelerate</code>, <code>brake</code>, and <code>turn</code>. However, the class itself doesn't contain any specific car's color or speed, just as a blueprint doesn't include the color of a specific house's walls or the type of its doors. Instead, these details are determined when you create an object from the class, which is like building a house from a blueprint.</p> <p>The following is a simple example of a class declaration in Java:</p> <pre><code>public class Car {\n    // Fields (attributes)\n    private String color;\n    private String brand;\n    private double speed;\n\n    // Methods\n    public void accelerate() {\n        speed += 10;\n    }\n\n    public void brake() {\n        if (speed &gt; 0) speed -= 10;\n    }\n\n    // ... other methods as needed\n}\n</code></pre> <p>This <code>Car</code> class serves as a blueprint for creating <code>Car</code> objects. Each <code>Car</code> object created from this class will have its own <code>color</code>, <code>brand</code>, and <code>speed</code> attributes and will be able to <code>accelerate</code> and brake through the defined methods. But remember, these details are only determined when you create an instance (or object) of the class.</p> <p>A class, therefore, lays out the characteristics and behaviors that are common to all objects of a certain kind, but it's the instantiated objects that hold the actual values.</p>"},{"location":"week5-l2/#constructor","title":"Constructor","text":"<p>Within a class, you can define a <code>constructor</code>, which is a special type of method used to initialize the state of an object, or in other words, set initial values for the object's attributes. The constructor is called automatically when a new instance of a class is created. It has the same name as its class and doesn't return any value (not even void).</p> <p>Here is a simple example of a class:</p> <pre><code>public class Car {\n    // Fields (attributes)\n    private String color;\n    private String brand;\n    private double speed;\n\n    // Constructor\n    public Car(String color, String brand, double speed) {\n        this.color = color;\n        this.brand = brand;\n        this.speed = speed;\n    }\n\n    // Methods\n    public void accelerate() {\n        speed += 10;\n    }\n\n    public void brake() {\n        if (speed &gt; 0) speed -= 10;\n    }\n\n    // ... other methods as needed\n}\n</code></pre> <p>In this updated <code>Car</code> class, the constructor <code>Car</code> is defined with three parameters: <code>color</code>, <code>brand</code>, and <code>speed</code>. When you create a new Car object, you can pass these three arguments to the constructor to initialize the car's color, brand, and speed:</p>"},{"location":"week5-l2/#instantiation-and-object-independence","title":"Instantiation and Object Independence","text":"<p>In Java, you create an object (or an instance of a class) using the <code>new</code> keyword:</p> <pre><code>Car myCar = new Car(\"red\", \"Toyota\", 0);\n</code></pre> <p>Here, <code>myCar</code> is an instance of the <code>Car</code> class, with a color of \"red\", a brand of \"Toyota\", and an initial speed of 0.</p> <p>You can create multiple instances of a class, and each instance is completely independent of the others. Let's illustrate this by creating another <code>Car</code> instance:</p> <pre><code>Car yourCar = new Car(\"blue\", \"Ford\", 0);\n</code></pre> <p>We now have two <code>Car</code> instances: <code>myCar</code> and <code>yourCar</code>. They are both instances of the same Car class, but have their own separate attributes. Changes to one instance do not affect the other. For example:</p> <pre><code>myCar.accelerate();  // Increases the speed of myCar, not yourCar\n</code></pre> <p>This independent nature of objects is a cornerstone of Object-Oriented Programming (OOP), providing a high degree of modularity and reusability in your code.</p>"},{"location":"week5-l2/#tasks","title":"Tasks","text":"<p>In a new Java file named Week5Task2.java, complete the following tasks:</p> <ol> <li>Define a class Student with the following attributes: name, grade, and major.</li> <li>Include a constructor that initializes all the attributes.</li> <li>Create a method study() that prints out \"{name} is studying.\".</li> <li>In your main() method, create an object of the Student class and call the study() method.</li> </ol> <p>For extra practice, try creating additional objects and calling various methods.</p> <p>Answers</p>"},{"location":"week5-l2/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Java Classes/Objects</p> <p>Oracle Docs - Defining a Class</p>"},{"location":"week6-l1/","title":"Arrays","text":"<p>An <code>array</code> in Java is a data structure that allows you to store multiple values of the same type in a single variable. Arrays can store any data type: int, char, String, etc. Arrays in Java are objects and they are dynamically allocated.</p>"},{"location":"week6-l1/#declaring-an-array","title":"Declaring an array","text":"<p>Let's look at the general form of declaring an array:</p> <pre><code>dataType[] arrayName; //preferred way.\n</code></pre> <p>Once an array is declared, you can initialize it. Here is how you can initialize an array in Java:</p> <pre><code>int[] myArray = new int[10];\n</code></pre> <p>In this code, <code>myArray</code> is an array that can hold ten integers. The new keyword allocates memory for ten integers consecutively in memory and returns the reference to the first memory location.</p> <p>You can also initialize an array with specific values as follows:</p> <pre><code>int[] myArray = {1, 2, 3, 4, 5};\n</code></pre> <p>In this case, the size of the array is determined by the number of values in the curly braces <code>{}</code>.</p>"},{"location":"week6-l1/#accessing-data-in-an-array","title":"Accessing Data in an Array","text":"<p>To access the elements of an array, you use the index number that refers to the position of the element in the array. In Java, array indexing starts at 0. For example, to access the first element of the array, you use index 0.</p> <p>Here's how you can access elements in an array:</p> <pre><code>int[] myArray = {1, 2, 3, 4, 5};\nSystem.out.println(myArray[0]); // Prints 1\nSystem.out.println(myArray[4]); // Prints 5\n</code></pre> <p>You can also change the value of a specific element in an array by accessing it using its index:</p> <pre><code>myArray[2] = 10; // Changes the third element of the array to 10\n</code></pre>"},{"location":"week6-l1/#using-arrays-with-loops","title":"Using Arrays with Loops","text":"<p>Loops are often used with arrays to access each element in the array. Here's how you can use a <code>for</code> loop to access and print all the elements in an array:</p> <pre><code>int[] myArray = {1, 2, 3, 4, 5};\n\nfor (int i = 0; i &lt; myArray.length; i++) {\n    System.out.println(myArray[i]);\n}\n</code></pre> <p>In this code, the variable <code>i</code> starts from <code>0</code> and increases by <code>1</code> in each loop iteration until it becomes equal to the length of the array (<code>myArray.length</code>). This ensures that all the elements of the array are accessed.</p>"},{"location":"week6-l1/#tasks","title":"Tasks","text":"<p>In a new Java file named <code>Week6Task1.java</code>, complete the following tasks:</p> <ol> <li>Declare an array of strings named colors and initialize it with the values \"red\", \"blue\", \"green\", \"yellow\", and \"purple\".</li> <li>Print the third value in the array.</li> <li>Change the value of the second element in the array to \"black\".</li> <li>Print the entire array to check your changes.</li> <li>Use a for loop to iterate over the array and print each color.</li> </ol> <p>Remember that arrays in Java are zero-indexed, which means the first element is at index 0.</p> <p>Answers</p>"},{"location":"week6-l1/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Java Arrays</p> <p>Oracle Docs - Arrays</p>"},{"location":"week6-l2/","title":"Exception Handling","text":""},{"location":"week6-l2/#what-is-exception-handling","title":"What is Exception Handling?","text":"<p><code>Exception Handling</code> in Java is a powerful mechanism that is used to handle the runtime errors so that the normal flow of the application can be maintained. In Java, an exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.</p> <p>The main advantage of exception handling is to maintain the normal flow of the application. An exception normally disrupts the normal flow of the application, which is why we use exception handling. Here is a hierarchy of Java Exception classes to give you a general idea:</p> <pre><code>java.lang.Throwable\n    |__java.lang.Exception\n        |__java.lang.RuntimeException\n        |__Other exceptions\n</code></pre>"},{"location":"week6-l2/#causes-of-exceptions","title":"Causes of Exceptions","text":"<p>Divide by Zero: When an arithmetic operation attempts to divide a number by zero, an ArithmeticException is thrown.</p> <pre><code>int result = 10 / 0; // This will throw an ArithmeticException\n</code></pre> <p>Array Out of Bounds: When an attempt is made to access an index in an array that does not exist (such as if the index is negative or greater than the array's length minus 1), an <code>ArrayIndexOutOfBoundsException</code> is thrown.</p> <pre><code>int[] array = new int[5];\nint value = array[10]; // This will throw an ArrayIndexOutOfBoundsException\n</code></pre> <p>Null Reference: When an attempt is made to call a method or access a property of an object that hasn't been instantiated (meaning, the object is null), a NullPointerException is thrown.</p> <pre><code>String str = null;\nint length = str.length(); // This will throw a NullPointerException\n</code></pre> <p>These are just a few examples. Java has a large number of exception classes to handle various different types of exceptional situations. Note that exceptions are different from syntax errors or logical errors in your code. Exceptions are problems that arise while your program is running, not issues detected by the compiler.</p>"},{"location":"week6-l2/#basic-structure-of-exception-handling","title":"Basic Structure of Exception Handling","text":"<p>Exception handling in Java uses five keywords: <code>try</code>, <code>catch</code>, <code>finally</code>, <code>throw</code>, and <code>throws</code>. The <code>try</code> and <code>catch</code> blocks are used to handle exceptions. The <code>try</code> block contains a block of code where an exception can occur, while the <code>catch</code> block is used to handle the exception. Here is the basic structure of a try/catch block:</p> <pre><code>try {\n    // code that may raise an exception\n} catch (ExceptionType name) {\n    // code to handle the exception\n}\n</code></pre> <p>Let's consider an example where we deliberately cause an exception to occur:</p> <pre><code>try {\n    int divideByZero = 5 / 0;\n    System.out.println(\"Rest of try block\");\n} catch (ArithmeticException e) {\n    System.out.println(\"Arithmetic Exception: \" + e.getMessage());\n}\n</code></pre> <p>In this case, the <code>ArithmeticException</code> is caught and handled. The program does not terminate prematurely, and can continue with the next statements.</p>"},{"location":"week6-l2/#tasks","title":"Tasks","text":"<p>In a new Java file named <code>Week6Task2.java</code>, complete the following tasks:</p> <ol> <li>Create a method named divide that takes two integer parameters and returns their quotient.</li> <li>In the divide method, include a try/catch block that will catch an <code>ArithmeticException</code> (which happens when you divide by zero).</li> <li>In the catch block, print a message that tells the user they cannot divide by zero.</li> <li>In your main() method, call the divide method with parameters that will cause an exception, and with parameters that will not.</li> </ol> <p>Remember, the main goal here is to prevent the program from crashing when an exception occurs.</p> <p>Answers</p>"},{"location":"week6-l2/#additional-resources","title":"Additional Resources","text":"<p>W3 Schools - Java Exceptions</p> <p>Oracle Docs - Exceptions</p>"},{"location":"week7-l1/","title":"Exploring the WPILib Framework","text":"<p>WPILib, short for FIRST Robotics Competition Software (FRC), is a library that enables teams to write their robot code in Java or C++. It includes classes to handle basic robotics programming tasks and interfaces for hardware components, making it much easier to program a competitive robot.</p> <p>The WPILib suite is an impressive collection of libraries, tools, and utilities to help teams develop their robot software. Some of its features include motor control libraries, sensor interfaces, networking features, and even simulation capabilities.</p>"},{"location":"week7-l1/#why-use-wpilib","title":"Why use WPILib?","text":"<p>The main advantage of using WPILib is that it abstracts the complexity of the hardware and low-level programming tasks. This allows teams to focus more on implementing the robot's behavior and less on the specifics of how the hardware works. It also provides a common framework that is used by many teams, which makes sharing code and getting help from the community much easier.</p>"},{"location":"week7-l1/#how-to-use-wpilib","title":"How to use WPILib","text":"<p>The typical way to use WPILib in a robot program is to extend one of its base classes and override methods to specify the robot's behavior. The TimedRobot class is the most commonly used base class. It provides a simple main loop that is called every 20 milliseconds and callback methods for different stages of the competition (like autonomous or teleoperated mode).</p> <p>Here's a simple example of a robot program using TimedRobot:</p> <pre><code>import edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    @Override\n    public void autonomousInit() {\n        // Code here will run once when the autonomous period starts.\n    }\n\n    @Override\n    public void autonomousPeriodic() {\n        // Code here will run repeatedly during the autonomous period.\n    }\n\n    @Override\n    public void teleopInit() {\n        // Code here will run once when the teleoperated period starts.\n    }\n\n    @Override\n    public void teleopPeriodic() {\n        // Code here will run repeatedly during the teleoperated period.\n    }\n}\n</code></pre> <p>In <code>teleopInit()</code>, we initialize the state of the robot for the teleoperated period. This could involve resetting sensors, setting initial motor speeds, or other preparation tasks. The <code>teleopInit()</code> method is called once each time the robot enters the teleoperated mode.</p> <p>In <code>teleopPeriodic()</code>, we control the robot's behavior during the teleoperated period. This method is called approximately every 20ms (or 50 times per second) during the teleoperated period. Typically, code in this method will read inputs from joystick or other controls, and use those inputs to control motors and other outputs.</p> <p>Here's an example of how you might use these methods to drive a robot with a joystick:</p> <pre><code>import edu.wpi.first.wpilibj.TimedRobot;\nimport edu.wpi.first.wpilibj.XboxController;\n\npublic class Robot extends TimedRobot {\n    // Create an XboxController on port 0\n    XboxController controller = new XboxController(0);\n\n    @Override\n    public void teleopInit() {\n        // Print a message to the console when teleoperated mode starts\n        System.out.println(\"Teleoperated period has started!\");\n    }\n\n    @Override\n    public void teleopPeriodic() {\n        // Print the current left stick Y-axis position to the console\n        System.out.println(\"Left stick Y position: \" + controller.getY(XboxController.Hand.kLeft));\n\n        // Check if A or B button is pressed and call respective methods\n        if (controller.getAButton()) {\n            printAButtonPressed();\n        }\n        if (controller.getBButton()) {\n            printBButtonPressed();\n        }\n    }\n\n    // Method that is called when the A button is pressed\n    public void printAButtonPressed() {\n        System.out.println(\"A button has been pressed.\");\n    }\n\n    // Method that is called when the B button is pressed\n    public void printBButtonPressed() {\n        System.out.println(\"B button has been pressed.\");\n    }\n}\n</code></pre> <p>In the <code>teleopPeriodic()</code> method, I added checks to see if the A or B button on the Xbox controller is pressed using <code>controller.getAButton()</code> and <code>controller.getBButton()</code>. When a button is pressed, the corresponding method (<code>printAButtonPressed()</code> or <code>printBButtonPressed()</code>) is called, which prints a message to the console.</p>"},{"location":"week7-l1/#running-a-build-in-wpilib-vs-code","title":"Running a Build in WPILib VS Code","text":"<p>WPILib offers a comprehensive set of tools for building and deploying code on FRC robots, with integration into Visual Studio Code. To run a build in WPILib VS Code, follow these steps:</p> <ol> <li> <p>Open Your Project: Navigate to the WPILib project in VS Code by choosing <code>File &gt; Open Folder</code> and selecting the folder where your project resides.</p> </li> <li> <p>Build Your Project: Click on the WPI icon on the upper right hand side of the VS Code window. In the command palette that appears, type \"<code>WPILib: Build Robot Code</code>\" and select it.</p> </li> <li> <p>Deploying Code: To deploy code to your robot, use the command \"<code>WPILib: Deploy Robot Code</code>\". Ensure your roboRIO is connected to your development machine either by USB or through the network. VS Code will compile your code and upload the resulting executable to the roboRIO.</p> </li> </ol>"},{"location":"week7-l1/#simulating-robot-code","title":"Simulating Robot Code","text":"<p>The WPILib project supports a robot simulation GUI, which allows teams to test their robot code without a physical robot. This feature is extremely useful for testing code changes quickly and debugging potential issues.</p> <p>To run the simulator, follow these steps:</p> <ol> <li> <p>Open Your Project: As with the previous sections, open your project in Visual Studio Code.</p> </li> <li> <p>Run the Simulator: Click on the WPI icon on the upper right hand side of the VS Code window. In the command palette that appears, type \"WPILib: Simulate Robot Code\" and select it.</p> </li> <li> <p>In the next window \"Pick extensions to run\" select both Sim GUI and Use Real Driverstation. </p> </li> </ol> <p>Open the FRC Driver station from your desktop, the application should automatically connect to the simulator.  </p> <p>Interact with the Simulator: The simulator window will open, showing various options for controlling and observing your simulated robot. These options can simulate different parts of your robot, like motors, encoders, gyroscopes and so on. This enables you to test how your code interacts with these components. For example, you can simulate pressing buttons on your joystick or Xbox controller to see how your robot code reacts.</p> <p>Stop the Simulator: When you're done with testing, you can stop the simulator by clicking the \"stop\" button on the toolbar in VS Code (or Ctrl + F5).</p>"},{"location":"week7-l1/#tasks","title":"Tasks","text":"<ol> <li> <p>Create a new Robot Project:</p> <ul> <li>Click the WPILib button in the right-hand corner.   </li> <li>In the drop-down menu, filter to \"&gt;WPILib: Create a new project\" and click enter.  </li> <li>Click \"Select a project type (Example or Template)\".</li> <li>Choose \"Template\".</li> <li>Select \"Java\".</li> <li>Click \"Timed Robot\".</li> <li>For the \"Base Folder\", select your Desktop or wherever you are storing your projects. Enter the project name as \"Week7Robot\". Ensure \"Create a new folder\" is checked.</li> <li>For the team number, enter 2852.</li> <li>Click the checkbox for \"Enable Desktop Support\".</li> <li>Lastly, click \"Generate Project\".  </li> </ul> </li> <li> <p>Explore the Generated Code: Spend some time understanding the generated code. Each part is there for a reason and has a specific purpose. If there are parts that are confusing, use the WPILib documentation or other resources to help you understand it better.</p> </li> <li> <p>Modify the Robot Code: In the teleop period, make the robot do something different. Interact with the controller to print details to the terminal when each button is pressed. This could be as simple as printing a different message for each button, or it could be something more complex depending on your understanding and creativity.</p> </li> </ol> <p>Remember, the goal here is to familiarize yourself with WPILib and understand how to create and modify a robot project. Don't worry if you don't understand everything right away. Take your time and don't be afraid to experiment.</p>"},{"location":"week7-l1/#additional-resources","title":"Additional Resources","text":"<p>WPILib Documentation</p> <p>WPILib: Create a Robot Program</p> <p>WPILib: Joysticks</p> <p>WPILib: Using Test Mode</p>"},{"location":"week7-l2/","title":"Controlling Motors","text":"<p>Controlling your motors is an essential part of FRC Robotics. It's not just about setting a power and leaving it; you'll often need to dynamically control motors based on sensors, user input, or pre-defined conditions. In this lesson, we will explore some of the advanced controls available in WPILib.</p>"},{"location":"week7-l2/#understanding-motor-controllers","title":"Understanding Motor Controllers","text":"<p>In FRC Robotics, motor controllers are the interfaces that allow us to electronically control the motors. Various types of motor controllers are used in FRC, each with their own unique properties and methods of control. Some common examples include the SparkMax, Talon, and Victor motor controllers.</p> <p>WPILib has classes to represent these motor controllers, such as <code>SparkMax</code>, <code>Talon</code>, <code>Victor</code>, etc. To use a motor controller in your code, you instantiate the corresponding class and use its methods to control the motor.</p>"},{"location":"week7-l2/#example","title":"Example","text":"<p>Here is a basic example of how to use a <code>SparkMax</code> motor controller to control a motor:</p> <pre><code>import edu.wpi.first.wpilibj.TimedRobot;\nimport com.revrobotics.CANSparkMax;\n\npublic class Robot extends TimedRobot {\n    private CANSparkMax motor;\n\n    @Override\n    public void robotInit() {\n        motor = new CANSparkMax(1, MotorType.kBrushless); // SparkMax is flashed to CAN id 1\n    }\n\n    @Override\n    public void teleopPeriodic() {\n        motor.set(0.5); // Set the motor to half power\n    }\n}\n</code></pre> <p>In the <code>robotInit</code> method, we initialize a new <code>SparkMax</code> motor controller on CAN id 1. Then, in <code>teleopPeriodic</code>, we set the power of the motor to 0.5, which is half power.</p>"},{"location":"week7-l2/#control-a-motor-with-a-joystick","title":"Control a Motor with a Joystick","text":"<p>In many robots, you'll want to use a joystick to control the motor. In the <code>teleopPeriodic()</code> method, the joystick's Y-axis value is continually read and directly set as the output for the motor controller. As <code>controller.getY(Hand.kLeft)</code> returns a value between -1 and 1 (representing the full range of the joystick), the motor speed varies from full reverse (-1), to stop (0), to full forward (+1) corresponding to the movement of the joystick.</p> <p>Here's how to do this:</p> <pre><code>import edu.wpi.first.wpilibj.TimedRobot;\nimport edu.wpi.first.wpilibj.XboxController;\nimport com.revrobotics.CANSparkMax;\n\npublic class Robot extends TimedRobot {\n    private CANSparkMax motor;\n    private XboxController controller;\n\n    @Override\n    public void robotInit() {\n        motor = new CANSparkMax(1, MotorType.kBrushless);\n        controller = new XboxController(0); // Controller in USB port 0\n    }\n\n    @Override\n    public void teleopPeriodic() {\n        motor.set(controller.getY(Hand.kLeft)); // Control motor power with left joystick Y-axis\n    }\n}\n</code></pre> <p>This results in a straightforward one-to-one control system where the position of the joystick directly influences the speed and direction of the motor.</p>"},{"location":"week7-l2/#inverting-motor-direction","title":"Inverting Motor Direction","text":"<p>In many robotic systems, especially those with multiple motor assemblies like a drivetrain, there might be a requirement for one motor to mirror or \"follow\" the actions of another. This is typically done to ensure synchronized operation of multiple motors for executing coordinated tasks.</p> <pre><code>motor.setInverted(true); // Inverts the direction of the motor\n</code></pre>"},{"location":"week7-l2/#create-a-follower-motor","title":"Create a Follower Motor","text":"<p>In many robotic systems, especially those with multiple motor assemblies like a drivetrain, there might be a requirement for one motor to mirror or \"follow\" the actions of another. This is typically done to ensure synchronized operation of multiple motors for executing coordinated tasks.</p> <p>In the example given below, a second motor, <code>followerMotor</code>, is declared and set to follow the <code>motor</code>. The follower <code>motor</code> is also a SPARK MAX motor controller, connected through the CAN bus on port 2.</p> <p>Once <code>followerMotor.follow(motor)</code> is called, the <code>followerMotor</code> will now mirror the actions of <code>motor</code>. So, if <code>motor</code>'s speed is set to 0.5, the <code>followerMotor</code> will also run at a speed of 0.5. If <code>motor</code>'s direction changes, the <code>followerMotor</code> will change its direction as well. The follower <code>motor</code>'s operation is now entirely dependent on the leading motor unless otherwise specified.</p> <pre><code>CANSparkMax followerMotor = new CANSparkMax(2, MotorType.kBrushless);\nfollowerMotor.follow(motor); // followerMotor will now mirror the actions of motor\n</code></pre>"},{"location":"week7-l2/#stop-motor-with-limit-switch","title":"Stop Motor with Limit Switch","text":"<p>A limit switch halts a motor when it reaches a specified limit. This can be crucial in preventing mechanical damage or undesired behavior. Upon the switch's trigger, the software stops the motor, ensuring controlled movement.</p> <pre><code>DigitalInput limitSwitch = new DigitalInput(0); // Limit switch plugged into DIO port 0\n\n@Override\npublic void teleopPeriodic() {\n    if (limitSwitch.get()) { // If limit switch is triggered\n        motor.stopMotor(); // Stop the motor\n    } else {\n        motor.set(0.5); // Otherwise, set motor to half power\n    }\n}\n</code></pre> <p>The <code>limitSwitch.get()</code> function returns a boolean value that indicates the state of the limit switch. If the switch is pressed (i.e., the limit has been reached), it returns <code>true</code>. If the switch is not pressed (i.e., the limit has not been reached), it returns <code>false</code>. The return value of this function can be used to conditionally control the motor, stopping it when the limit is reached.</p>"},{"location":"week7-l2/#reading-from-the-hall-sensor-encoder","title":"Reading from the Hall Sensor Encoder","text":"<p>A Hall sensor encoder is a device typically attached to a motor, providing real-time position feedback by detecting changes in magnetic fields. This ability to precisely measure the motor's position is crucial for tasks that require fine control and accurate movements. For instance, a robot arm that needs to move to specific locations would benefit from a Hall sensor encoder. The line <code>double position = motor.getEncoder().getPosition();</code> fetches the motor's current position, which can then be output or utilized within the program for responsive control.</p> <pre><code>double position = motor.getEncoder().getPosition(); // Get current position of motor\nSystem.out.println(\"Motor Position: \" + position);\n</code></pre>"},{"location":"week7-l2/#tasks","title":"Tasks","text":"<ol> <li> <p>Explore SparkMax motor controller: Start a new robot project as you've learned before. Instantiate a SparkMax motor controller and write a simple program that sets its speed to half power in the teleoperated mode. Test this program in the simulator to ensure the motor is working correctly.</p> </li> <li> <p>Control a motor with a joystick: Expand your program to control the SparkMax motor with a joystick. Map the Y-axis of the joystick to the power of the motor. Observe how the motor's speed and direction change with the joystick's movement in the simulator.</p> </li> <li> <p>Invert motor direction: Experiment with the setInverted method. Write a program where the motor direction is inverted after a certain time or based on a button press on the joystick. Observe the behavior in the simulator.</p> </li> <li> <p>Create a follower motor: Extend your robot setup to include a second motor. Use the follow method to make the second motor follow the first one. Observe how the follower motor mirrors the actions of the leading motor in the simulator.</p> </li> <li> <p>Implement a limit switch: Use a digital input to simulate a limit switch in your code. Program the motor to stop when the limit switch is triggered and run otherwise. Test your setup in the simulator.</p> </li> <li> <p>Read from a Hall Sensor Encoder: Use the getEncoder and getPosition methods to read the position of the motor. Print this value to the console in your robot program and observe how it changes as you run the motor.</p> </li> </ol>"},{"location":"week7-l2/#additional-resources","title":"Additional Resources","text":"<p>WPILib Motor Control Documentation</p> <p>REV Robotics SPARK MAX Software Resources</p> <p>REV Robotics SPARK MAX Examples</p>"},{"location":"week8-l1/","title":"Sensors","text":"<p>Sensors play a pivotal role in the world of FRC robotics. They help in perceiving the environment or measuring physical properties and can be used for a variety of functions, like determining robot positioning, measuring motor speed, detecting objects, and much more.</p> <p>This lesson will cover some of the most commonly used sensors in FRC, how to interface them with your robot using WPILib, and the necessary code to get them working.</p>"},{"location":"week8-l1/#encoders","title":"Encoders","text":"<p>An encoder is a type of sensor that measures the rotational movement of a shaft. Encoders consist of a rotating disk, an LED or similar light source, and a photosensor, which works by detecting the interruptions of light caused by the disk's rotation. Encoders in FRC are often used to measure the distance a robot has traveled or to regulate the speed of a mechanism.</p> <p>Encoders return the number of \"counts\" or \"ticks\" that have occurred, which corresponds to the number of times the disk has interrupted the light to the photosensor. By knowing the distance your robot travels per tick (which depends on your specific encoder, gear ratios, and wheel diameter), you can convert this tick count to a more meaningful distance.</p> <pre><code>import edu.wpi.first.wpilibj.Encoder;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize an encoder connected to digital ports 0 and 1\n    Encoder encoder = new Encoder(0, 1);\n\n    @Override\n    public void teleopPeriodic() {\n        // Print the current count of the encoder\n        System.out.println(\"Encoder count: \" + encoder.get());\n    }\n}\n</code></pre>"},{"location":"week8-l1/#gyroscopes","title":"Gyroscopes","text":"<p>A gyroscope, or gyro for short, is a device that measures rotational velocity around a particular axis. In FRC, gyros are often used to help robots drive straight or rotate to a specific angle. There are several types of gyros, but most FRC teams use a type called a MEMS gyro that measures the rate of rotation using microscopic mechanical systems.</p> <p>Gyroscopes return the rate of rotation in degrees per second, and also keep track of the total angle that the robot has turned since the gyro was last reset. The angle is calculated by integrating (summing over time) the rate of rotation.</p> <pre><code>import edu.wpi.first.wpilibj.ADXRS450_Gyro;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize a gyro on the SPI port\n    ADXRS450_Gyro gyro = new ADXRS450_Gyro();\n\n    @Override\n    public void teleopPeriodic() {\n        // Print the current angle of the gyro\n        System.out.println(\"Gyro angle: \" + gyro.getAngle());\n    }\n}\n</code></pre>"},{"location":"week8-l1/#potentiometers","title":"Potentiometers","text":"<p>A potentiometer is a type of sensor that measures the rotational position of a component. It operates on the principle of varying resistance. In FRC, potentiometers are often used to understand the position of an arm or other rotating mechanism.</p> <p>Potentiometers return a voltage that is proportional to the angular position of the sensor. This voltage can be converted into an angle by knowing the total voltage range of the sensor and the total angle range that the sensor measures.</p> <pre><code>import edu.wpi.first.wpilibj.AnalogPotentiometer;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize a potentiometer connected to analog port 0\n    AnalogPotentiometer potentiometer = new AnalogPotentiometer(0);\n\n    @Override\n    public void teleopPeriodic() {\n        // Print the current value of the potentiometer\n        System.out.println(\"Potentiometer value: \" + potentiometer.get());\n    }\n}\n</code></pre>"},{"location":"week8-l1/#color-sensors","title":"Color Sensors","text":"<p>A color sensor is a type of sensor that detects color using a light source and a photodiode to measure the reflection of light off a surface. In FRC, color sensors are used for tasks like sorting objects by color or following a colored line.</p> <p>Color sensors return the amount of red, green, and blue light that was detected. This can be used to identify the color of an object, either by comparing the raw RGB values to known values for different colors, or by converting the RGB values to a different color space like HSV.</p> <pre><code>import edu.wpi.first.wpilibj.I2C;\nimport edu.wpi.first.wpilibj.util.Color;\nimport com.revrobotics.ColorSensorV3;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize a color sensor on the I2C port\n    ColorSensorV3 colorSensor = new ColorSensorV3(I2C.Port.kOnboard);\n\n    @Override\n    public void teleopPeriodic() {\n        // Print the detected color\n        Color detectedColor = colorSensor.getColor();\n        System.out.println(\"Detected color: \" + detectedColor);\n    }\n}\n</code></pre>"},{"location":"week8-l1/#accelerometers","title":"Accelerometers","text":"<p>An accelerometer is a type of sensor that measures acceleration, which is the rate of change of velocity. In FRC, accelerometers can be used to measure the impact of a collision, detect if the robot is falling, or help estimate the robot's velocity or position.</p> <p>Accelerometers return the acceleration of the robot in three axes (X, Y, Z), in units of \"g's\", where 1 g is approximately 9.81 m/s\u00b2. The X-axis typically corresponds to forward/backward movement, the Y-axis to left/right movement, and the Z-axis to up/down movement.</p> <pre><code>import edu.wpi.first.wpilibj.BuiltInAccelerometer;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize the built-in accelerometer\n    BuiltInAccelerometer accelerometer = new BuiltInAccelerometer();\n\n    @Override\n    public void teleopPeriodic() {\n        // Print the current acceleration in the X-axis\n        System.out.println(\"X acceleration: \" + accelerometer.getX());\n    }\n}\n</code></pre>"},{"location":"week8-l1/#limit-switches","title":"Limit Switches","text":"<p>A limit switch is a simple sensor that closes an electrical circuit when physically pressed. In FRC, limit switches are often used to detect the end of travel of a mechanism, such as an arm or elevator.</p> <p>Limit switches return a boolean value (true/false) that indicates whether the switch is currently being pressed. Some switches are \"normally open\" (NO), which means they return false when not pressed and true when pressed, while others are \"normally closed\" (NC), which means they return true when not pressed and false when pressed.</p> <pre><code>import edu.wpi.first.wpilibj.DigitalInput;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize a limit switch connected to digital port 0\n    DigitalInput limitSwitch = new DigitalInput(0);\n\n    @Override\n    public void teleopPeriodic() {\n        // Print whether the switch is currently pressed\n        System.out.println(\"Limit switch pressed: \" + limitSwitch.get());\n    }\n}\n</code></pre>"},{"location":"week8-l1/#tasks","title":"Tasks","text":"<ol> <li> <p>Use the provided examples and the WPILib documentation to implement code for various sensors. Experiment with different sensors and see how they react to different stimuli.</p> </li> <li> <p>Create a system that uses multiple types of sensors. For example, you might use an encoder and a potentiometer to understand both the speed and position of a mechanism.</p> </li> <li> <p>Continue exploring the WPILib documentation to learn about other sensors that are available.</p> </li> </ol>"},{"location":"week8-l1/#additional-resources","title":"Additional Resources","text":"<p>WPILib Sensors</p>"},{"location":"week8-l2/","title":"Pneumatics","text":"<p>In the field of FRC robotics, pneumatic systems provide a wide range of opportunities for robot functions, including (but not limited to) actuating cylinders, changing robot mechanisms, and gear shifting. The backbone of a robot's pneumatic system is the Pneumatic Control Module (PCM) and the solenoids. This lesson will provide an overview of the PCM and solenoids, including how they work, how to wire them, and how to program them using WPILib.</p>"},{"location":"week8-l2/#pneumatic-control-module-pcm","title":"Pneumatic Control Module (PCM)","text":"<p>The PCM is an FRC-specific electronic component that controls the operation of the pneumatic system. It has a series of ports for connecting and controlling solenoids, and it also monitors the system's pressure switch to regulate compressor operations.</p> <p>The PCM communicates with the RoboRIO over the CAN bus, allowing it to be addressed and controlled from software. Through the PCM, the RoboRIO can enable and disable the compressor, read the current pressure switch state, and control individual solenoids.</p>"},{"location":"week8-l2/#solenoids","title":"Solenoids","text":"<p>Solenoids are the actuators that convert electrical signals from the PCM into mechanical action. In the context of FRC, solenoids usually control the flow of air to pneumatic cylinders, thereby controlling the movement of those cylinders.</p> <p>There are two types of solenoids in FRC: single and double solenoids. A single solenoid has one output, and will send the cylinder out when activated, and let the cylinder retract when deactivated. A double solenoid, on the other hand, has two outputs: activating one sends the cylinder out, and activating the other retracts the cylinder.</p>"},{"location":"week8-l2/#wiring","title":"Wiring","text":"<p>To wire a PCM, connect the power input to a dedicated WAGO connector on the Power Distribution Panel (PDP), and connect the CAN bus terminals to the rest of the robot's CAN bus.</p> <p>Solenoids are connected to the ports on the PCM. Single solenoids use one port, while double solenoids use two adjacent ports.</p>"},{"location":"week8-l2/#programming","title":"Programming","text":"<p>In your robot code, you'll need to create an object for each solenoid you want to control, and use the methods provided by WPILib to control the state of the solenoids.</p> <p>For example, to control a single solenoid on port 0:</p> <pre><code>import edu.wpi.first.wpilibj.Solenoid;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize a solenoid on port 0\n    Solenoid solenoid = new Solenoid(0);\n\n    @Override\n    public void teleopPeriodic() {\n        // Set the solenoid to true to activate it\n        solenoid.set(true);\n    }\n}\n</code></pre> <p>And to control a double solenoid on ports 0 and 1:</p> <pre><code>import edu.wpi.first.wpilibj.DoubleSolenoid;\nimport edu.wpi.first.wpilibj.TimedRobot;\n\npublic class Robot extends TimedRobot {\n    // Initialize a double solenoid on ports 0 and 1\n    DoubleSolenoid doubleSolenoid = new DoubleSolenoid(0, 1);\n\n    @Override\n    public void teleopPeriodic() {\n        // Set the double solenoid to forward to extend the cylinder\n        doubleSolenoid.set(DoubleSolenoid.Value.kForward);\n    }\n}\n</code></pre>"},{"location":"week8-l2/#tasks","title":"Tasks","text":"<ol> <li> <p>Use the provided examples and the WPILib documentation to implement code for a solenoid. Experiment with controlling the solenoid in different ways, such as having it activate when a button is pressed.</p> </li> <li> <p>Create a system that uses multiple solenoids. For example, you might use one to extend and retract an arm, and another to open and close a claw at the end of the arm.</p> </li> <li> <p>Continue exploring the WPILib documentation to learn about other aspects of the PCM, like controlling the compressor and reading the pressure switch.</p> </li> </ol>"},{"location":"week8-l2/#additional-resources","title":"Additional Resources","text":"<p>WPILib Solenoids</p>"},{"location":"week9-l1/","title":"Introduction to Command-Based Programming","text":"<p>Command-based programming offers a structured approach for controlling robot operations in the FIRST Robotics Competition (FRC). By defining individual commands and subsystems, teams can organize their code, make it more readable, and facilitate troubleshooting.</p>"},{"location":"week9-l1/#why-command-based-programming","title":"Why Command-Based Programming?","text":"<p>Command-based programming divides robot operations into a series of commands and subsystems. This approach provides:</p> <ol> <li>Structured Robot Code: Each command represents a single robot operation, and each subsystem represents a collection of related hardware components. This modular approach promotes clarity and simplifies debugging.</li> <li>Benefits: With commands acting as \"tasks\" and subsystems as \"resources\", the command-based framework provides an intuitive way to schedule and handle multiple operations concurrently.</li> </ol>"},{"location":"week9-l1/#subsystems","title":"Subsystems","text":"<p>Subsystems group related hardware components. For example, a drivetrain could be a subsystem composed of multiple motors.</p> <pre><code>import edu.wpi.first.wpilibj2.command.SubsystemBase;\n\npublic class Drivetrain extends SubsystemBase {\n    // Example motor declaration\n    private final Motor leftMotor = new Motor();\n    private final Motor rightMotor = new Motor();\n\n    public void drive(double speed) {\n        leftMotor.set(speed);\n        rightMotor.set(speed);\n    }\n}\n</code></pre> <ol> <li> <p>Definition and Purpose: Subsystems manage related robot components as cohesive units. They also provide a structured way to organize code around these components.</p> </li> <li> <p>Declaring Subsystems: Typically defined as classes, subsystems incorporate methods to control their associated components.</p> </li> <li> <p>Controlling Hardware Components: Subsystems contain methods to read from and write to the physical hardware, like setting motor speeds or reading sensor data.</p> </li> </ol>"},{"location":"week9-l1/#commands","title":"Commands","text":"<p>Commands represent individual robot operations and use subsystems to achieve their desired effects.</p> <pre><code>import edu.wpi.first.wpilibj2.command.CommandBase;\n\npublic class DriveForward extends CommandBase {\n    private final Drivetrain drivetrain;\n\n    public DriveForward(Drivetrain dt) {\n        drivetrain = dt;\n        addRequirements(drivetrain); // This command requires the drivetrain subsystem.\n    }\n\n    @Override\n    public void initialize() {}\n\n    @Override\n    public void execute() {\n        drivetrain.drive(0.5);  // Drive forward at half speed\n    }\n\n    @Override\n    public boolean isFinished() {\n        return false;  // This command never ends on its own.\n    }\n\n    @Override\n    public void end(boolean interrupted) {\n        drivetrain.drive(0);  // Stop the drivetrain when the command ends\n    }\n}\n</code></pre> <ol> <li> <p>Definition and Purpose: Commands are actions or operations the robot can perform. For instance, a command might make the robot drive forward or rotate.</p> </li> <li> <p>Defining Commands: Commands are usually defined as classes with methods to handle their lifecycle:</p> <ul> <li><code>initialize()</code>: Called when the command starts.</li> <li><code>execute()</code>: Repeatedly called until the command finishes.</li> <li><code>end()</code>: Called once when the command completes.</li> <li><code>isFinished()</code>: Indicates when the command should stop.</li> </ul> </li> <li> <p>Interaction with Subsystems: Commands utilize subsystems to interact with hardware components. A command will \"require\" a subsystem, ensuring exclusive access to it for the command's duration. Default </p> </li> </ol>"},{"location":"week9-l1/#default-commands","title":"Default Commands","text":"<p>Subsystems can have associated default commands that run when no other command requires the subsystem.</p> <pre><code>// In the robot's main class or robot container\ndrivetrain.setDefaultCommand(new DriveForward(drivetrain));\n</code></pre> <ol> <li> <p>Importance: Default commands allow for continuous operation of a subsystem when not interrupted by other commands.</p> </li> <li> <p>Setting Default Commands: The subsystem's <code>setDefaultCommand()</code> method assigns its default command.</p> </li> </ol>"},{"location":"week9-l1/#tasks","title":"Tasks:","text":"<ol> <li> <p>Setting Up a Project: Initialize a robot project with a command-based structure using WPILib in your preferred programming environment.</p> </li> <li> <p>Defining a Subsystem: Create a <code>Drivetrain</code> subsystem class, integrating motors as components.</p> </li> <li> <p>Creating a Command: Develop a <code>DriveForward</code> command. Within the command's <code>execute()</code> method, instruct the <code>Drivetrain</code> subsystem to move forward.</p> </li> </ol>"},{"location":"week9-l1/#additional-resources","title":"Additional Resources:","text":"<p>WPILib Command-Based Programming Guide</p> <p>Creating a Subsystem in WPILib</p> <p>Creating Commands with WPILib</p>"},{"location":"week9-l2/","title":"Advanced Command-Based Programming","text":"<p>Advanced command-based programming is an invaluable tool for FRC teams aiming to orchestrate sophisticated autonomous and tele-operated behaviors. Delving beyond the basics, this lesson will unravel the nuances of command-grouping, command scheduling, triggers, dependencies, and command lifecycle management to maximize robot performance.</p>"},{"location":"week9-l2/#command-groups","title":"Command Groups","text":"<p>Command Groups are the linchpin for structuring multiple commands, be it running them sequentially or in parallel.</p>"},{"location":"week9-l2/#sequencing-commands","title":"Sequencing Commands","text":"<p>Allows for a series of commands to be executed one after the other. The sequential group finishes after the last command in the sequence finishes. For smooth operation, each command within the sequence must conclude; otherwise, subsequent commands won't initiate.</p> <pre><code>import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;\n\npublic class DriveThenTurn extends SequentialCommandGroup {\n    public DriveThenTurn(Drivetrain drivetrain) {\n        addCommands(\n            new DriveForward(drivetrain),\n            new TurnRight(drivetrain)\n        );\n    }\n}\n</code></pre> <p>Utilize the <code>andThen()</code> and <code>beforeStarting()</code> decorators to build a sequence composition using infix syntax.</p> <pre><code>new Command1().andThen(new Command2());\n</code></pre>"},{"location":"week9-l2/#parallelizing-commands","title":"Parallelizing Commands","text":"<p>Commands can run simultaneously, bringing diverse actions to life at the same time. The group completes when the longest-running command finalizes. Care is required to ensure concurrent commands don't interfere with each other.</p> <p>Make use of the <code>alongWith()</code> decorator for parallel command execution.</p> <p>Example:</p> <pre><code>new Command1().alongWith(new Command2());\n</code></pre>"},{"location":"week9-l2/#using-conditions-to-decide-command-flow","title":"Using Conditions to Decide Command Flow","text":"<p>Introduce dynamic decisions in command execution based on real-time conditions. The command chosen depends on the outcome of the condition set.</p> <p>The <code>ConditionalCommand</code> class provides this functionality.</p> <p>Example:</p> <pre><code>new ConditionalCommand(new Command1(), new Command2(), () -&gt; someCondition);\n</code></pre>"},{"location":"week9-l2/#command-scheduling","title":"Command Scheduling","text":""},{"location":"week9-l2/#the-command-scheduler","title":"The Command Scheduler","text":"<p>Acting as the engine of the command-based framework, the Command Scheduler ensures smooth command initiation and termination. It runs in the backdrop, managing command processes seamlessly.</p>"},{"location":"week9-l2/#scheduling-commands-manually-and-through-triggers","title":"Scheduling Commands: Manually and through Triggers","text":"<p>Commands are scheduled either directly or via triggers such as joystick buttons. The scheduler's innate intelligence dictates the best initiation moment, guaranteeing precise command execution.</p> <p>Example:</p> <pre><code>new JoystickButton(joystick, Button.kA.value).whenPressed(new Command1());\n</code></pre>"},{"location":"week9-l2/#triggers","title":"Triggers","text":""},{"location":"week9-l2/#definition-and-use-cases","title":"Definition and Use Cases","text":"<p>Triggers are conditions or inputs that prompt command execution. Whether it's a joystick movement or a sensor reading, they offer dynamic control over the robot's actions.</p>"},{"location":"week9-l2/#built-in-triggers-in-wpilib","title":"Built-in Triggers in WPILib","text":"<p>WPILib offers a rich collection of triggers, such as joystick buttons, facilitating robot interactions.</p> <p>Example:</p> <pre><code>new JoystickButton(joystick, Button.kB.value).toggleWhenPressed(new Command2());\n</code></pre>"},{"location":"week9-l2/#creating-custom-triggers","title":"Creating Custom Triggers","text":"<p>Tailor-make triggers for specific requirements, allowing deeper robot control and behavior intricacy.</p> <p>Example:</p> <pre><code>new Trigger(() -&gt; customCondition).whenActive(new Command1());\n</code></pre>"},{"location":"week9-l2/#command-dependencies","title":"Command Dependencies","text":"<p>Understanding Command-Subsystem Dependencies Commands have associated subsystems denoting which robot components they control. This association guarantees mutual exclusivity, ensuring two commands can't conflict.</p>"},{"location":"week9-l2/#ensuring-conflicting-commands-dont-run-together","title":"Ensuring Conflicting Commands Don't Run Together","text":"<p>Safety and predictability are paramount. The Command Scheduler prevents simultaneous execution of conflicting commands, avoiding potential disruptions.</p> <p>Example:</p> <pre><code>new Command1().withRequirements(subsystem);\n</code></pre>"},{"location":"week9-l2/#command-lifecycle-interrupting-commands","title":"Command Lifecycle &amp; Interrupting Commands","text":""},{"location":"week9-l2/#lifecycle-phases","title":"Lifecycle Phases","text":"<p>Commands undergo distinct phases: initialization, execution, and termination, each pivotal in understanding the command's life.</p>"},{"location":"week9-l2/#interrupting-commands","title":"Interrupting Commands","text":"<p>There are moments when halting a command becomes crucial. The Command Scheduler provides the tools to safely interrupt any running command.</p> <p>Example:</p> <pre><code>scheduler.cancel(new Command1());\n</code></pre>"},{"location":"week9-l2/#tasks","title":"Tasks","text":"<ol> <li>Enhance the Drivetrain Subsystem: Integrate functionalities for turning.</li> <li>Design a Command Group: Sequentially move forward followed by a turn.</li> <li>Implement Joystick Controls: Integrate joystick inputs to navigate the robot.</li> </ol>"},{"location":"week9-l2/#additional-resources","title":"Additional Resources","text":"<p>WPILib Command-Based User Guide</p> <p>Sequencing and Parallelizing</p> <p>Command Scheduler Documentation</p> <p>Joysticks and Command-Based Programming</p> <p>Creating Custom Triggers</p>"}]}